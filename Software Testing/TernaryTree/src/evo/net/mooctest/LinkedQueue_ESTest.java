/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 02 00:37:31 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.LinkedQueue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LinkedQueue_ESTest extends LinkedQueue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      LinkedQueue<Integer> linkedQueue0 = new LinkedQueue<Integer>();
      Integer integer0 = new Integer((-1008));
      linkedQueue0.enqueue(integer0);
      Integer integer1 = linkedQueue0.getFront();
      assertEquals((-1008), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      LinkedQueue<LinkedQueue<Object>> linkedQueue0 = new LinkedQueue<LinkedQueue<Object>>();
      boolean boolean0 = linkedQueue0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      LinkedQueue<Integer> linkedQueue0 = new LinkedQueue<Integer>();
      Integer integer0 = new Integer((-1462));
      linkedQueue0.enqueue(integer0);
      boolean boolean0 = linkedQueue0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      LinkedQueue<Object> linkedQueue0 = new LinkedQueue<Object>();
      linkedQueue0.enqueue((Object) null);
      Object object0 = linkedQueue0.getFront();
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      LinkedQueue<Object> linkedQueue0 = new LinkedQueue<Object>();
      linkedQueue0.enqueue((Object) null);
      linkedQueue0.dequeue();
      // Undeclared exception!
      try { 
        linkedQueue0.getFront();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.LinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      LinkedQueue<String> linkedQueue0 = new LinkedQueue<String>();
      // Undeclared exception!
      try { 
        linkedQueue0.dequeue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.LinkedQueue", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      LinkedQueue<String> linkedQueue0 = new LinkedQueue<String>();
      linkedQueue0.enqueue("RM*%$Ia i&8|T$7hy");
      linkedQueue0.dequeue();
      assertTrue(linkedQueue0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      LinkedQueue<String> linkedQueue0 = new LinkedQueue<String>();
      linkedQueue0.enqueue("RM*%$Ia i&8|T$7hy");
      linkedQueue0.enqueue("RM*%$Ia i&8|T$7hy");
      String string0 = linkedQueue0.dequeue();
      assertEquals("RM*%$Ia i&8|T$7hy", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      LinkedQueue<String> linkedQueue0 = new LinkedQueue<String>();
      linkedQueue0.clear();
      assertTrue(linkedQueue0.isEmpty());
  }
}
