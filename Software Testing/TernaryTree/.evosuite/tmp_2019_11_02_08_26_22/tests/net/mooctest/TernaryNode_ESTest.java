/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 02 00:35:21 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.TernaryNode;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TernaryNode_ESTest extends TernaryNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode0.setMiddleChild(ternaryNode2);
      ternaryNode5.setRightChild(ternaryNode3);
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode7 = ternaryNode6.copy();
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode7.isLeaf();
      ternaryNode4.getHeight();
      ternaryNode2.hasRightChild();
      ternaryNode0.getMiddleChild();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      ternaryNode3.setMiddleChild(ternaryNode4);
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      ternaryNode5.copy();
      ternaryNode5.copy();
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode8.isLeaf();
      ternaryNode6.getNumberOfNodes();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("");
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      ternaryNode0.getLeftChild();
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode3 = ternaryNode2.copy();
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>(integer0, ternaryNode3, ternaryNode2, ternaryNode3);
      ternaryNode4.getMiddleChild();
      Object object0 = new Object();
      ternaryNode4.setData(object0);
      ternaryNode4.getData();
      ternaryNode3.getHeight();
      ternaryNode4.getNumberOfNodes();
      ternaryNode1.getLeftChild();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>(integer0);
      ternaryNode4.setLeftChild(ternaryNode3);
      TernaryNode<Integer> ternaryNode7 = ternaryNode6.copy();
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode7.isLeaf();
      ternaryNode4.getNumberOfNodes();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode1 = ternaryNode0.copy();
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>(integer0, ternaryNode1, ternaryNode0, ternaryNode1);
      ternaryNode2.getMiddleChild();
      TernaryNode<Integer> ternaryNode3 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode4 = ternaryNode3.copy();
      ternaryNode1.getHeight();
      ternaryNode4.isLeaf();
      ternaryNode2.hasLeftChild();
      ternaryNode1.hasLeftChild();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode2.setMiddleChild(ternaryNode0);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      ternaryNode6.copy();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      ternaryNode8.setRightChild(ternaryNode7);
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode1.hasMiddleChild();
      ternaryNode1.getMiddleChild();
      ternaryNode2.getRightChild();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      ternaryNode5.copy();
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode8.isLeaf();
      ternaryNode6.getNumberOfNodes();
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-2948));
      TernaryNode<Integer> ternaryNode0 = new TernaryNode<Integer>();
      TernaryNode<Integer> ternaryNode1 = ternaryNode0.copy();
      TernaryNode<Integer> ternaryNode2 = new TernaryNode<Integer>(integer0, ternaryNode1, ternaryNode1, ternaryNode0);
      ternaryNode2.copy();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      ternaryNode3.setLeftChild(ternaryNode6);
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode3.getLeftChild();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("bIX'C%wX0+IpLx;1Q|");
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      ternaryNode1.copy();
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode3 = ternaryNode2.copy();
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>(integer0, ternaryNode3, ternaryNode2, ternaryNode3);
      TernaryNode<Object> ternaryNode5 = ternaryNode4.getMiddleChild();
      ternaryNode4.setLeftChild(ternaryNode5);
      Object object0 = new Object();
      ternaryNode4.setData(object0);
      ternaryNode4.getData();
      ternaryNode3.getHeight();
      ternaryNode3.hasLeftChild();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode7 = ternaryNode6.copy();
      ternaryNode5.getData();
      ternaryNode7.setData(integer0);
      ternaryNode7.setLeftChild(ternaryNode6);
      ternaryNode4.getHeight();
      ternaryNode7.isLeaf();
      ternaryNode3.getMiddleChild();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      ternaryNode3.getMiddleChild();
      Object object0 = new Object();
      ternaryNode3.setData(object0);
      TernaryNode<Integer> ternaryNode4 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode5 = ternaryNode4.copy();
      ternaryNode3.getData();
      ternaryNode5.setLeftChild(ternaryNode4);
      ternaryNode3.getHeight();
      ternaryNode5.isLeaf();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getRightChild();
      ternaryNode4.setData(ternaryNode6);
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      ternaryNode5.getData();
      ternaryNode4.getHeight();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode3 = ternaryNode2.copy();
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>(integer0, ternaryNode3, ternaryNode2, ternaryNode3);
      ternaryNode4.getMiddleChild();
      TernaryNode<Integer> ternaryNode5 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode6 = ternaryNode5.copy();
      ternaryNode4.getData();
      ternaryNode3.getHeight();
      ternaryNode0.getMiddleChild();
      ternaryNode6.getRightChild();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertEquals(3, ternaryNode2.getHeight());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.isLeaf());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasRightChild());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(ternaryNode6, ternaryNode3);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertNotSame(ternaryNode6, ternaryNode5);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode5.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode7.hasLeftChild());
      assertTrue(ternaryNode7.isLeaf());
      assertEquals(1, ternaryNode7.getHeight());
      assertNotNull(ternaryNode7);
      
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode7.hasLeftChild());
      assertTrue(ternaryNode7.isLeaf());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertFalse(ternaryNode8.hasLeftChild());
      assertEquals(1, ternaryNode8.getHeight());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertTrue(ternaryNode8.isLeaf());
      assertNotNull(ternaryNode8);
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      
      Object object1 = ternaryNode5.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertNotNull(object1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(object1, object0);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertEquals(1, int0);
      
      ternaryNode5.getLeftChild();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>();
      TernaryNode<Integer> ternaryNode7 = ternaryNode6.copy();
      ternaryNode5.getData();
      ternaryNode7.setMiddleChild(ternaryNode6);
      ternaryNode4.getHeight();
      ternaryNode7.isLeaf();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>(integer0);
      ternaryNode6.copy();
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode5.getHeight();
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      ternaryNode0.getLeftChild();
      ternaryNode0.setLeftChild((TernaryNode<String>) null);
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      ternaryNode0.setMiddleChild(ternaryNode1);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      ternaryNode5.getMiddleChild();
      Object object0 = new Object();
      ternaryNode5.setData(object0);
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>();
      ternaryNode6.copy();
      ternaryNode5.getData();
      ternaryNode4.getHeight();
      ternaryNode0.hasMiddleChild();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      ternaryNode0.setLeftChild(ternaryNode0);
      TernaryNode<String> ternaryNode1 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode0);
      ternaryNode0.setMiddleChild(ternaryNode0);
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode3 = ternaryNode2.copy();
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>(integer0, ternaryNode3, ternaryNode2, ternaryNode3);
      ternaryNode4.getMiddleChild();
      Object object0 = new Object();
      ternaryNode4.setData(object0);
      TernaryNode<Integer> ternaryNode5 = new TernaryNode<Integer>(integer0);
      ternaryNode5.setRightChild(ternaryNode5);
      ternaryNode4.getData();
      ternaryNode3.getHeight();
      ternaryNode0.hasMiddleChild();
      ternaryNode0.getMiddleChild();
      ternaryNode5.isLeaf();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertNotNull(ternaryNode0);
      
      ternaryNode0.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasLeftChild());
      
      TernaryNode<String> ternaryNode1 = new TernaryNode<String>("");
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertNotNull(ternaryNode1);
      
      ternaryNode0.setRightChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertNotNull(ternaryNode3);
      
      ternaryNode3.setMiddleChild((TernaryNode<Object>) null);
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = ternaryNode4.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNull(ternaryNode5);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode3.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertNotSame(ternaryNode3, ternaryNode4);
      
      TernaryNode<Integer> ternaryNode6 = new TernaryNode<Integer>();
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertNotNull(ternaryNode6);
      
      TernaryNode<Integer> ternaryNode7 = ternaryNode6.copy();
      assertFalse(ternaryNode7.equals((Object)ternaryNode6));
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertNotNull(ternaryNode7);
      assertNotSame(ternaryNode6, ternaryNode7);
      assertNotSame(ternaryNode7, ternaryNode6);
      
      Object object1 = ternaryNode4.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNull(object1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertEquals(1, int0);
      
      TernaryNode<Object> ternaryNode8 = ternaryNode4.getRightChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNull(ternaryNode8);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasRightChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertEquals(3, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasRightChild());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertFalse(ternaryNode6.hasLeftChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasRightChild());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertSame(ternaryNode6, ternaryNode3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode5.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertNotNull(ternaryNode7);
      
      ternaryNode5.setRightChild(ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertEquals(1, ternaryNode8.getHeight());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasLeftChild());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertNotNull(ternaryNode8);
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      
      Object object1 = ternaryNode5.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotNull(object1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertSame(object1, object0);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertEquals(1, int0);
      
      TernaryNode<Integer> ternaryNode9 = ternaryNode8.getRightChild();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(ternaryNode7.equals((Object)ternaryNode8));
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertEquals(1, ternaryNode8.getHeight());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasLeftChild());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertNull(ternaryNode9);
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode2.hasRightChild());
      assertEquals(3, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasLeftChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasRightChild());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(ternaryNode6, ternaryNode3);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertNotSame(ternaryNode6, ternaryNode5);
      
      TernaryNode<Object> ternaryNode7 = ternaryNode4.getLeftChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertNull(ternaryNode7);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      
      ternaryNode5.setRightChild((TernaryNode<Object>) null);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(3, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      
      ternaryNode3.setMiddleChild(ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasMiddleChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode5.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasMiddleChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      
      Object object1 = ternaryNode5.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasMiddleChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotNull(object1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(object1, object0);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasMiddleChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertEquals(1, int0);
      
      TernaryNode<Integer> ternaryNode8 = new TernaryNode<Integer>(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertTrue(ternaryNode8.isLeaf());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertEquals(1, ternaryNode8.getHeight());
      assertFalse(ternaryNode8.hasLeftChild());
      assertNotNull(ternaryNode8);
      
      boolean boolean0 = ternaryNode8.hasMiddleChild();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertTrue(ternaryNode8.isLeaf());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertEquals(1, ternaryNode8.getHeight());
      assertFalse(ternaryNode8.hasLeftChild());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertEquals(3, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertNotNull(ternaryNode5);
      
      ternaryNode3.setData(integer0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertNotNull(ternaryNode6);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(ternaryNode6, ternaryNode3);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode4);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode5.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode7.hasLeftChild());
      assertTrue(ternaryNode7.isLeaf());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertNotNull(ternaryNode7);
      
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode7.hasLeftChild());
      assertTrue(ternaryNode7.isLeaf());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasLeftChild());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertFalse(ternaryNode8.hasRightChild());
      assertEquals(1, ternaryNode8.getHeight());
      assertNotNull(ternaryNode8);
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      
      Object object1 = ternaryNode5.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertFalse(ternaryNode5.isLeaf());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertNotNull(object1);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(object1, object0);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertEquals(1, int0);
      
      boolean boolean0 = ternaryNode1.hasRightChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.isLeaf());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(3, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertFalse(ternaryNode6.hasLeftChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasRightChild());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertSame(ternaryNode6, ternaryNode3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode5.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertNotNull(ternaryNode7);
      
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertEquals(1, ternaryNode8.getHeight());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertFalse(ternaryNode8.hasLeftChild());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertNotNull(ternaryNode8);
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      
      Object object1 = ternaryNode5.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertNotNull(object1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertSame(object1, object0);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertEquals(1, int0);
      
      boolean boolean0 = ternaryNode8.isLeaf();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(ternaryNode7.equals((Object)ternaryNode8));
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertEquals(1, ternaryNode7.getHeight());
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertEquals(1, ternaryNode8.getHeight());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertFalse(ternaryNode8.hasLeftChild());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertFalse(ternaryNode8.hasRightChild());
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("bIX'C%wX0+IpLx;1Q|");
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertFalse(ternaryNode2.isLeaf());
      assertEquals(3, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertNotNull(ternaryNode6);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertSame(ternaryNode6, ternaryNode3);
      
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      assertFalse(ternaryNode7.hasLeftChild());
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertEquals(1, ternaryNode7.getHeight());
      assertNotNull(ternaryNode7);
      
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.getMiddleChild();
      assertFalse(ternaryNode7.hasLeftChild());
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertEquals(1, ternaryNode7.getHeight());
      assertNull(ternaryNode8);
      
      TernaryNode<Object> ternaryNode9 = ternaryNode3.getLeftChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertNull(ternaryNode9);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode5);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("");
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = new TernaryNode<String>((String) null, (TernaryNode<String>) null, (TernaryNode<String>) null, ternaryNode0);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertNotNull(ternaryNode1);
      
      ternaryNode0.setRightChild((TernaryNode<String>) null);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      
      TernaryNode<String> ternaryNode2 = ternaryNode1.copy();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertNotNull(ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode0);
      
      TernaryNode<String> ternaryNode3 = ternaryNode1.copy();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertNotNull(ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode1);
      
      TernaryNode<String> ternaryNode4 = ternaryNode2.getRightChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode3));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode3));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode1));
      assertFalse(ternaryNode4.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode4);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode4);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode4);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode1);
      assertNotSame(ternaryNode4, ternaryNode0);
      
      ternaryNode4.setMiddleChild(ternaryNode2);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode4));
      assertFalse(ternaryNode0.equals((Object)ternaryNode3));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode4));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode3));
      assertFalse(ternaryNode2.equals((Object)ternaryNode4));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode1));
      assertFalse(ternaryNode4.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode4);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode4);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode4);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode1);
      assertNotSame(ternaryNode4, ternaryNode0);
      
      boolean boolean0 = ternaryNode4.hasLeftChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode4));
      assertFalse(ternaryNode0.equals((Object)ternaryNode3));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode4));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode3));
      assertFalse(ternaryNode2.equals((Object)ternaryNode4));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode4.equals((Object)ternaryNode1));
      assertFalse(ternaryNode4.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode4);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode4);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode4);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode4, ternaryNode1);
      assertNotSame(ternaryNode4, ternaryNode0);
      assertFalse(boolean0);
      
      Integer integer0 = new Integer(818);
      assertNotNull(integer0);
      assertEquals(818, (int)integer0);
      
      TernaryNode<Integer> ternaryNode5 = new TernaryNode<Integer>(integer0);
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Integer> ternaryNode6 = ternaryNode5.copy();
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode6, ternaryNode5);
      
      TernaryNode<Integer> ternaryNode7 = ternaryNode5.getLeftChild();
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertNull(ternaryNode7);
      assertNotSame(ternaryNode5, ternaryNode6);
      
      TernaryNode<Integer> ternaryNode8 = new TernaryNode<Integer>(integer0, ternaryNode6, ternaryNode6, (TernaryNode<Integer>) null);
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode8.equals((Object)ternaryNode6));
      assertFalse(ternaryNode8.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode8.hasRightChild());
      assertEquals(2, ternaryNode8.getHeight());
      assertFalse(ternaryNode8.isLeaf());
      assertTrue(ternaryNode8.hasMiddleChild());
      assertTrue(ternaryNode8.hasLeftChild());
      assertEquals(3, ternaryNode8.getNumberOfNodes());
      assertNotNull(ternaryNode8);
      
      ternaryNode8.setRightChild(ternaryNode5);
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode8));
      assertFalse(ternaryNode6.equals((Object)ternaryNode8));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode8.equals((Object)ternaryNode6));
      assertFalse(ternaryNode8.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertEquals(2, ternaryNode8.getHeight());
      assertFalse(ternaryNode8.isLeaf());
      assertTrue(ternaryNode8.hasMiddleChild());
      assertTrue(ternaryNode8.hasRightChild());
      assertTrue(ternaryNode8.hasLeftChild());
      assertEquals(4, ternaryNode8.getNumberOfNodes());
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode6, ternaryNode8);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode8, ternaryNode6);
      assertNotSame(ternaryNode8, ternaryNode5);
      
      TernaryNode<Object> ternaryNode9 = new TernaryNode<Object>();
      assertFalse(ternaryNode9.hasMiddleChild());
      assertFalse(ternaryNode9.hasRightChild());
      assertFalse(ternaryNode9.hasLeftChild());
      assertEquals(1, ternaryNode9.getHeight());
      assertTrue(ternaryNode9.isLeaf());
      assertEquals(1, ternaryNode9.getNumberOfNodes());
      assertNotNull(ternaryNode9);
      
      ternaryNode6.setData(integer0);
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode8));
      assertFalse(ternaryNode6.equals((Object)ternaryNode8));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode6, ternaryNode8);
      assertNotSame(ternaryNode6, ternaryNode5);
      
      int int0 = ternaryNode9.getHeight();
      assertFalse(ternaryNode9.hasMiddleChild());
      assertFalse(ternaryNode9.hasRightChild());
      assertFalse(ternaryNode9.hasLeftChild());
      assertEquals(1, ternaryNode9.getHeight());
      assertTrue(ternaryNode9.isLeaf());
      assertEquals(1, ternaryNode9.getNumberOfNodes());
      assertEquals(1, int0);
      
      TernaryNode<Integer> ternaryNode10 = ternaryNode5.copy();
      assertFalse(ternaryNode10.equals((Object)ternaryNode5));
      assertFalse(ternaryNode10.equals((Object)ternaryNode8));
      assertFalse(ternaryNode10.equals((Object)ternaryNode6));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode8));
      assertFalse(ternaryNode10.hasMiddleChild());
      assertEquals(1, ternaryNode10.getNumberOfNodes());
      assertFalse(ternaryNode10.hasLeftChild());
      assertTrue(ternaryNode10.isLeaf());
      assertEquals(1, ternaryNode10.getHeight());
      assertFalse(ternaryNode10.hasRightChild());
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertNotNull(ternaryNode10);
      assertNotSame(ternaryNode10, ternaryNode5);
      assertNotSame(ternaryNode10, ternaryNode8);
      assertNotSame(ternaryNode10, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode10);
      
      Object object0 = ternaryNode9.getData();
      assertFalse(ternaryNode9.hasMiddleChild());
      assertFalse(ternaryNode9.hasRightChild());
      assertFalse(ternaryNode9.hasLeftChild());
      assertEquals(1, ternaryNode9.getHeight());
      assertTrue(ternaryNode9.isLeaf());
      assertEquals(1, ternaryNode9.getNumberOfNodes());
      assertNull(object0);
      
      int int1 = ternaryNode8.getNumberOfNodes();
      assertFalse(int1 == int0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode8));
      assertFalse(ternaryNode5.equals((Object)ternaryNode10));
      assertFalse(ternaryNode6.equals((Object)ternaryNode10));
      assertFalse(ternaryNode6.equals((Object)ternaryNode8));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode8.equals((Object)ternaryNode6));
      assertFalse(ternaryNode8.equals((Object)ternaryNode10));
      assertFalse(ternaryNode8.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertEquals(2, ternaryNode8.getHeight());
      assertFalse(ternaryNode8.isLeaf());
      assertTrue(ternaryNode8.hasMiddleChild());
      assertTrue(ternaryNode8.hasRightChild());
      assertTrue(ternaryNode8.hasLeftChild());
      assertEquals(4, ternaryNode8.getNumberOfNodes());
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode10);
      assertNotSame(ternaryNode6, ternaryNode10);
      assertNotSame(ternaryNode6, ternaryNode8);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode8, ternaryNode6);
      assertNotSame(ternaryNode8, ternaryNode10);
      assertNotSame(ternaryNode8, ternaryNode5);
      assertEquals(4, int1);
      
      TernaryNode<Object> ternaryNode11 = ternaryNode9.getLeftChild();
      assertFalse(ternaryNode9.hasMiddleChild());
      assertFalse(ternaryNode9.hasRightChild());
      assertFalse(ternaryNode9.hasLeftChild());
      assertEquals(1, ternaryNode9.getHeight());
      assertTrue(ternaryNode9.isLeaf());
      assertEquals(1, ternaryNode9.getNumberOfNodes());
      assertNull(ternaryNode11);
      
      ternaryNode9.setRightChild((TernaryNode<Object>) null);
      assertFalse(ternaryNode9.hasMiddleChild());
      assertFalse(ternaryNode9.hasRightChild());
      assertFalse(ternaryNode9.hasLeftChild());
      assertEquals(1, ternaryNode9.getHeight());
      assertTrue(ternaryNode9.isLeaf());
      assertEquals(1, ternaryNode9.getNumberOfNodes());
      
      Integer integer1 = ternaryNode6.getData();
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode8));
      assertFalse(ternaryNode5.equals((Object)ternaryNode10));
      assertFalse(ternaryNode6.equals((Object)ternaryNode10));
      assertFalse(ternaryNode6.equals((Object)ternaryNode8));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertEquals(1, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertNotNull(integer1);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode10);
      assertNotSame(ternaryNode6, ternaryNode10);
      assertNotSame(ternaryNode6, ternaryNode8);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertEquals(818, (int)integer1);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = new TernaryNode<String>("Wd0*6~oYx]o", ternaryNode0, ternaryNode0, ternaryNode0);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertNotNull(ternaryNode1);
      
      ternaryNode0.setLeftChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasRightChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertNotNull(ternaryNode2);
      
      TernaryNode<String> ternaryNode3 = ternaryNode2.getLeftChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasLeftChild());
      assertNotNull(ternaryNode3);
      assertSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode1);
      
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotNull(ternaryNode4);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>("", ternaryNode4, ternaryNode4, ternaryNode4);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertNotNull(ternaryNode5);
      
      ternaryNode5.setMiddleChild(ternaryNode4);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode4);
      
      ternaryNode0.setRightChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasRightChild());
      assertSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      
      ternaryNode0.getNumberOfNodes();
      ternaryNode2.isLeaf();
      ternaryNode2.hasLeftChild();
      ternaryNode4.getNumberOfNodes();
      ternaryNode4.hasRightChild();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(4625);
      assertNotNull(integer0);
      assertEquals(4625, (int)integer0);
      
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = new TernaryNode<Object>(integer0, ternaryNode0, ternaryNode0, ternaryNode0);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertNotNull(ternaryNode1);
      
      TernaryNode<Object> ternaryNode2 = ternaryNode1.getMiddleChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.isLeaf());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertNotNull(ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      
      ternaryNode2.setRightChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertFalse(ternaryNode2.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      
      boolean boolean0 = ternaryNode2.hasRightChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertFalse(ternaryNode2.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertTrue(boolean0);
      
      TernaryNode<Integer> ternaryNode3 = new TernaryNode<Integer>(integer0);
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Integer> ternaryNode4 = ternaryNode3.getRightChild();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertNull(ternaryNode4);
      
      ternaryNode3.setRightChild((TernaryNode<Integer>) null);
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      
      int int0 = ternaryNode3.getNumberOfNodes();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = new TernaryNode<Object>((Object) null, ternaryNode0, ternaryNode0, ternaryNode0);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertNotNull(ternaryNode1);
      
      ternaryNode0.setRightChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertTrue(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode0.setRightChild((TernaryNode<Object>) null);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertNotSame(ternaryNode0, ternaryNode1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer(2366);
      assertNotNull(integer0);
      assertEquals(2366, (int)integer0);
      
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>(integer0);
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<Object> ternaryNode2 = ternaryNode1.getMiddleChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertNull(ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      int int0 = ternaryNode0.getNumberOfNodes();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertEquals(1, int0);
      
      TernaryNode<String> ternaryNode3 = new TernaryNode<String>("v?f=a4,N%h");
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertNotNull(ternaryNode3);
      
      TernaryNode<String> ternaryNode4 = ternaryNode3.getLeftChild();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertNull(ternaryNode4);
      
      TernaryNode<String> ternaryNode5 = ternaryNode3.getRightChild();
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertNull(ternaryNode5);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Integer integer0 = new Integer(1746);
      assertNotNull(integer0);
      assertEquals(1746, (int)integer0);
      
      TernaryNode<Integer> ternaryNode0 = new TernaryNode<Integer>(integer0);
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Integer> ternaryNode1 = ternaryNode0.getRightChild();
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertNull(ternaryNode1);
      
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>();
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.isLeaf());
      assertNotNull(ternaryNode2);
      
      TernaryNode<Object> ternaryNode3 = ternaryNode2.getLeftChild();
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.isLeaf());
      assertNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>((Object) null);
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertNotNull(ternaryNode4);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(ternaryNode0, (TernaryNode<Object>) null, ternaryNode4, ternaryNode4);
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getNumberOfNodes());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotNull(ternaryNode5);
      
      ternaryNode2.setMiddleChild(ternaryNode4);
      assertFalse(ternaryNode2.equals((Object)ternaryNode4));
      assertFalse(ternaryNode2.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasLeftChild());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasRightChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertNotSame(ternaryNode2, ternaryNode4);
      assertNotSame(ternaryNode2, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode2));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getNumberOfNodes());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode6.isLeaf());
      assertTrue(ternaryNode6.hasMiddleChild());
      assertEquals(3, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertTrue(ternaryNode6.hasRightChild());
      assertEquals(2, ternaryNode6.getHeight());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode2);
      assertNotSame(ternaryNode6, ternaryNode4);
      
      TernaryNode<Object> ternaryNode7 = ternaryNode6.getRightChild();
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode2));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode7.equals((Object)ternaryNode4));
      assertFalse(ternaryNode7.equals((Object)ternaryNode6));
      assertFalse(ternaryNode7.equals((Object)ternaryNode5));
      assertFalse(ternaryNode7.equals((Object)ternaryNode2));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getNumberOfNodes());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode6.isLeaf());
      assertTrue(ternaryNode6.hasMiddleChild());
      assertEquals(3, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertTrue(ternaryNode6.hasRightChild());
      assertEquals(2, ternaryNode6.getHeight());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasRightChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertTrue(ternaryNode7.isLeaf());
      assertNotNull(ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode5, ternaryNode7);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode2);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertNotSame(ternaryNode6, ternaryNode7);
      assertNotSame(ternaryNode7, ternaryNode4);
      assertNotSame(ternaryNode7, ternaryNode6);
      assertNotSame(ternaryNode7, ternaryNode5);
      assertNotSame(ternaryNode7, ternaryNode2);
      
      boolean boolean0 = ternaryNode7.isLeaf();
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode7));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode2));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode6.equals((Object)ternaryNode7));
      assertFalse(ternaryNode7.equals((Object)ternaryNode4));
      assertFalse(ternaryNode7.equals((Object)ternaryNode6));
      assertFalse(ternaryNode7.equals((Object)ternaryNode5));
      assertFalse(ternaryNode7.equals((Object)ternaryNode2));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getNumberOfNodes());
      assertEquals(2, ternaryNode5.getHeight());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode6.isLeaf());
      assertTrue(ternaryNode6.hasMiddleChild());
      assertEquals(3, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertTrue(ternaryNode6.hasRightChild());
      assertEquals(2, ternaryNode6.getHeight());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasRightChild());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertTrue(ternaryNode7.isLeaf());
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode5, ternaryNode7);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode2);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertNotSame(ternaryNode6, ternaryNode7);
      assertNotSame(ternaryNode7, ternaryNode4);
      assertNotSame(ternaryNode7, ternaryNode6);
      assertNotSame(ternaryNode7, ternaryNode5);
      assertNotSame(ternaryNode7, ternaryNode2);
      assertTrue(boolean0);
      
      ternaryNode2.setMiddleChild(ternaryNode4);
      assertFalse(ternaryNode2.equals((Object)ternaryNode4));
      assertFalse(ternaryNode2.equals((Object)ternaryNode5));
      assertFalse(ternaryNode2.equals((Object)ternaryNode7));
      assertFalse(ternaryNode2.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasLeftChild());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasRightChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertNotSame(ternaryNode2, ternaryNode4);
      assertNotSame(ternaryNode2, ternaryNode5);
      assertNotSame(ternaryNode2, ternaryNode7);
      assertNotSame(ternaryNode2, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      
      ternaryNode5.setMiddleChild(ternaryNode2);
      assertFalse(ternaryNode2.equals((Object)ternaryNode4));
      assertFalse(ternaryNode2.equals((Object)ternaryNode5));
      assertFalse(ternaryNode2.equals((Object)ternaryNode7));
      assertFalse(ternaryNode2.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode7));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasLeftChild());
      assertFalse(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasRightChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotSame(ternaryNode2, ternaryNode4);
      assertNotSame(ternaryNode2, ternaryNode5);
      assertNotSame(ternaryNode2, ternaryNode7);
      assertNotSame(ternaryNode2, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode5, ternaryNode7);
      
      TernaryNode<Object> ternaryNode8 = ternaryNode5.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode7));
      assertFalse(ternaryNode8.equals((Object)ternaryNode4));
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertFalse(ternaryNode8.equals((Object)ternaryNode2));
      assertFalse(ternaryNode8.equals((Object)ternaryNode5));
      assertFalse(ternaryNode8.equals((Object)ternaryNode6));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode8.hasRightChild());
      assertTrue(ternaryNode8.hasMiddleChild());
      assertEquals(4, ternaryNode8.getNumberOfNodes());
      assertEquals(3, ternaryNode8.getHeight());
      assertFalse(ternaryNode8.hasLeftChild());
      assertFalse(ternaryNode8.isLeaf());
      assertNotNull(ternaryNode8);
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode5, ternaryNode7);
      assertNotSame(ternaryNode8, ternaryNode4);
      assertNotSame(ternaryNode8, ternaryNode7);
      assertNotSame(ternaryNode8, ternaryNode2);
      assertNotSame(ternaryNode8, ternaryNode5);
      assertNotSame(ternaryNode8, ternaryNode6);
      
      boolean boolean1 = ternaryNode5.isLeaf();
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode8));
      assertFalse(ternaryNode5.equals((Object)ternaryNode8));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode7));
      assertFalse(boolean1 == boolean0);
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(3, ternaryNode5.getHeight());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode8);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode5, ternaryNode7);
      assertFalse(boolean1);
      
      boolean boolean2 = ternaryNode4.hasRightChild();
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode8));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode8);
      assertFalse(boolean2);
      
      boolean boolean3 = ternaryNode4.hasRightChild();
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(ternaryNode4.equals((Object)ternaryNode7));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode2));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode8));
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertEquals(1, ternaryNode4.getHeight());
      assertNotSame(ternaryNode4, ternaryNode7);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode2);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode8);
      assertFalse(boolean3);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      boolean boolean0 = ternaryNode1.isLeaf();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("net.mooctest.TernaryNode");
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = new TernaryNode<String>("NabeV`D", ternaryNode0, ternaryNode0, ternaryNode0);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertNotNull(ternaryNode1);
      
      TernaryNode<String> ternaryNode2 = ternaryNode1.copy();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertEquals(2, ternaryNode2.getHeight());
      assertNotNull(ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      
      TernaryNode<String> ternaryNode3 = ternaryNode2.getMiddleChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode3.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertNotNull(ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode1);
      
      TernaryNode<String> ternaryNode4 = ternaryNode3.getMiddleChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode3));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode3));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode3.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode2.hasLeftChild());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasRightChild());
      assertEquals(2, ternaryNode2.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertNull(ternaryNode4);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode1);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setData(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      boolean boolean0 = ternaryNode0.hasRightChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TernaryNode<Integer> ternaryNode0 = new TernaryNode<Integer>();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      Integer integer0 = new Integer(3462);
      assertNotNull(integer0);
      assertEquals(3462, (int)integer0);
      
      ternaryNode0.setData(integer0);
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      
      boolean boolean0 = ternaryNode0.hasMiddleChild();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(boolean0);
      
      TernaryNode<Object> ternaryNode1 = new TernaryNode<Object>("");
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertNotNull(ternaryNode1);
      
      TernaryNode<Object> ternaryNode2 = ternaryNode1.getLeftChild();
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertNull(ternaryNode2);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>("", (TernaryNode<Object>) null, (TernaryNode<Object>) null, ternaryNode1);
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.getRightChild();
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertSame(ternaryNode1, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode4, ternaryNode1);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      Object object0 = ternaryNode4.getData();
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasRightChild());
      assertEquals(2, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode4.isLeaf());
      assertEquals(1, ternaryNode4.getHeight());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasRightChild());
      assertNotNull(object0);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertSame(ternaryNode1, ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode4, ternaryNode1);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("G-D@u5");
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = new TernaryNode<Object>();
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertNotNull(ternaryNode1);
      
      TernaryNode<Object> ternaryNode2 = ternaryNode1.copy();
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertEquals(1, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertNotNull(ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      
      ternaryNode1.setLeftChild(ternaryNode2);
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertEquals(1, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      
      boolean boolean0 = ternaryNode1.hasLeftChild();
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.isLeaf());
      assertNotSame(ternaryNode1, ternaryNode2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<Object> ternaryNode2 = ternaryNode0.copy();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.isLeaf());
      assertNotNull(ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode0);
      
      boolean boolean0 = ternaryNode0.hasLeftChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      ternaryNode0.setLeftChild((TernaryNode<Object>) null);
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Integer integer0 = new Integer(364);
      assertNotNull(integer0);
      assertEquals(364, (int)integer0);
      
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>(integer0);
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Object> ternaryNode1 = ternaryNode0.getLeftChild();
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertNull(ternaryNode1);
      
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>(integer0, (TernaryNode<Object>) null, (TernaryNode<Object>) null, ternaryNode0);
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertEquals(2, ternaryNode2.getHeight());
      assertNotNull(ternaryNode2);
      
      TernaryNode<Object> ternaryNode3 = ternaryNode2.getRightChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(2, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertEquals(2, ternaryNode2.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.isLeaf());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertFalse(ternaryNode3.hasRightChild());
      assertEquals(1, ternaryNode3.getHeight());
      assertNotNull(ternaryNode3);
      assertSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>(integer0);
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertNotNull(ternaryNode0);
      
      int int0 = ternaryNode0.getHeight();
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>("");
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertNotNull(ternaryNode0);
      
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertNotNull(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      ternaryNode1.setLeftChild(ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      TernaryNode<String> ternaryNode2 = new TernaryNode<String>("", ternaryNode0, ternaryNode0, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(2, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(5, ternaryNode2.getNumberOfNodes());
      assertEquals(3, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertNotNull(ternaryNode2);
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryNode<Object> ternaryNode3 = new TernaryNode<Object>();
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertNotNull(ternaryNode3);
      
      TernaryNode<Object> ternaryNode4 = ternaryNode3.copy();
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotNull(ternaryNode4);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertNotSame(ternaryNode4, ternaryNode3);
      
      TernaryNode<Object> ternaryNode5 = new TernaryNode<Object>(integer0, ternaryNode4, ternaryNode3, ternaryNode4);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertNotNull(ternaryNode5);
      
      TernaryNode<Object> ternaryNode6 = ternaryNode5.getMiddleChild();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode6.equals((Object)ternaryNode5));
      assertFalse(ternaryNode6.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertFalse(ternaryNode6.hasRightChild());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertFalse(ternaryNode6.hasLeftChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getHeight());
      assertNotNull(ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertNotSame(ternaryNode6, ternaryNode5);
      assertNotSame(ternaryNode6, ternaryNode4);
      assertSame(ternaryNode6, ternaryNode3);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      ternaryNode5.setRightChild(ternaryNode3);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      
      ternaryNode5.setData(object0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      
      TernaryNode<Integer> ternaryNode7 = new TernaryNode<Integer>(integer0);
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertNotNull(ternaryNode7);
      
      TernaryNode<Integer> ternaryNode8 = ternaryNode7.copy();
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertFalse(ternaryNode8.hasLeftChild());
      assertEquals(1, ternaryNode8.getHeight());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasRightChild());
      assertNotNull(ternaryNode8);
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      
      Object object1 = ternaryNode5.getData();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode4));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode6));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertTrue(ternaryNode5.hasMiddleChild());
      assertTrue(ternaryNode5.hasRightChild());
      assertEquals(2, ternaryNode5.getHeight());
      assertFalse(ternaryNode5.isLeaf());
      assertTrue(ternaryNode5.hasLeftChild());
      assertEquals(4, ternaryNode5.getNumberOfNodes());
      assertNotNull(object1);
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode4);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode6);
      assertSame(object1, object0);
      
      int int0 = ternaryNode4.getHeight();
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertEquals(1, int0);
      
      boolean boolean0 = ternaryNode8.isLeaf();
      assertTrue(integer0.equals((Object)int0));
      assertFalse(ternaryNode7.equals((Object)ternaryNode8));
      assertFalse(ternaryNode8.equals((Object)ternaryNode7));
      assertFalse(ternaryNode7.hasRightChild());
      assertTrue(ternaryNode7.isLeaf());
      assertFalse(ternaryNode7.hasMiddleChild());
      assertFalse(ternaryNode7.hasLeftChild());
      assertEquals(1, ternaryNode7.getHeight());
      assertEquals(1, ternaryNode7.getNumberOfNodes());
      assertFalse(ternaryNode8.hasMiddleChild());
      assertEquals(1, ternaryNode8.getNumberOfNodes());
      assertFalse(ternaryNode8.hasLeftChild());
      assertEquals(1, ternaryNode8.getHeight());
      assertTrue(ternaryNode8.isLeaf());
      assertFalse(ternaryNode8.hasRightChild());
      assertNotSame(ternaryNode7, ternaryNode8);
      assertNotSame(ternaryNode8, ternaryNode7);
      assertTrue(boolean0);
      
      int int1 = ternaryNode4.getHeight();
      assertTrue(int1 == int0);
      assertFalse(ternaryNode3.equals((Object)ternaryNode4));
      assertFalse(ternaryNode3.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode5));
      assertFalse(ternaryNode4.equals((Object)ternaryNode6));
      assertFalse(ternaryNode4.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertEquals(1, ternaryNode4.getNumberOfNodes());
      assertEquals(1, ternaryNode4.getHeight());
      assertTrue(ternaryNode4.isLeaf());
      assertFalse(ternaryNode4.hasRightChild());
      assertFalse(ternaryNode4.hasMiddleChild());
      assertFalse(ternaryNode4.hasLeftChild());
      assertNotSame(ternaryNode3, ternaryNode4);
      assertSame(ternaryNode3, ternaryNode6);
      assertNotSame(ternaryNode3, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode5);
      assertNotSame(ternaryNode4, ternaryNode6);
      assertNotSame(ternaryNode4, ternaryNode3);
      assertEquals(1, int1);
      
      boolean boolean1 = ternaryNode2.hasRightChild();
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertTrue(boolean1 == boolean0);
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-2948));
      assertNotNull(integer0);
      assertEquals((-2948), (int)integer0);
      
      TernaryNode<Integer> ternaryNode0 = new TernaryNode<Integer>();
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertNotNull(ternaryNode0);
      
      TernaryNode<Integer> ternaryNode1 = new TernaryNode<Integer>();
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertNotNull(ternaryNode1);
      
      TernaryNode<Integer> ternaryNode2 = new TernaryNode<Integer>(integer0, ternaryNode1, ternaryNode1, ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(2, ternaryNode2.getHeight());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertNotNull(ternaryNode2);
      
      TernaryNode<Integer> ternaryNode3 = ternaryNode2.copy();
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode0));
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(2, ternaryNode2.getHeight());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertTrue(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.isLeaf());
      assertEquals(2, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.isLeaf());
      assertTrue(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.hasLeftChild());
      assertEquals(4, ternaryNode3.getNumberOfNodes());
      assertTrue(ternaryNode3.hasMiddleChild());
      assertNotNull(ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode3, ternaryNode1);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      TernaryNode<String> ternaryNode1 = ternaryNode0.copy();
      ternaryNode1.setLeftChild(ternaryNode0);
      assertTrue(ternaryNode0.isLeaf());
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertFalse(ternaryNode0.isLeaf());
      
      Integer integer0 = new Integer(1);
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>();
      TernaryNode<Object> ternaryNode3 = ternaryNode2.copy();
      TernaryNode<Object> ternaryNode4 = new TernaryNode<Object>(integer0, ternaryNode3, ternaryNode2, ternaryNode3);
      ternaryNode4.getMiddleChild();
      Object object0 = new Object();
      TernaryNode<Integer> ternaryNode5 = new TernaryNode<Integer>(integer0);
      TernaryNode<Integer> ternaryNode6 = ternaryNode5.copy();
      ternaryNode4.getData();
      ternaryNode3.getHeight();
      ternaryNode6.isLeaf();
      int int0 = ternaryNode4.getNumberOfNodes();
      assertEquals(4, int0);
  }
}
