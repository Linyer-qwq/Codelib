/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 02 00:31:44 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Iterator;
import net.mooctest.TernaryNode;
import net.mooctest.TernaryTree;
import net.mooctest.TernaryTreeInterface;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TernaryTree_ESTest extends TernaryTree_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>();
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree1.isEmpty());
      
      ternaryTree0.setTree((Object) ternaryTree1, (TernaryTreeInterface<Object>) ternaryTree1, (TernaryTreeInterface<Object>) ternaryTree1, (TernaryTreeInterface<Object>) ternaryTree0);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      
      // Undeclared exception!
      ternaryTree0.iterativePreorderTraverse();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("net.mooctet.EmptyTreeException");
      assertNotNull(ternaryTree0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      int int0 = ternaryTree0.getNumberOfNodes();
      assertEquals(1, int0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>("net.mooctet.EmptyTreeException", ternaryTree0, ternaryTree0, ternaryTree0);
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertNotNull(ternaryNode0);
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      
      TernaryNode<String> ternaryNode1 = new TernaryNode<String>("net.mooctest.TernaryTree$PreorderIterator", ternaryNode0, ternaryNode0, ternaryNode0);
      assertNotNull(ternaryNode1);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      
      TernaryNode<String> ternaryNode2 = ternaryNode1.getLeftChild();
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotNull(ternaryNode2);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      
      TernaryNode<String> ternaryNode3 = ternaryNode2.copy();
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode1);
      assertNotNull(ternaryNode3);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode3.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      
      TernaryNode<String> ternaryNode4 = ternaryNode3.getRightChild();
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode3);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode1, ternaryNode3);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotSame(ternaryNode2, ternaryNode3);
      assertNotSame(ternaryNode3, ternaryNode0);
      assertNotSame(ternaryNode3, ternaryNode2);
      assertNotSame(ternaryNode3, ternaryNode1);
      assertNull(ternaryNode4);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode0.equals((Object)ternaryNode3));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.equals((Object)ternaryNode3));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryNode2.equals((Object)ternaryNode3));
      assertFalse(ternaryNode3.equals((Object)ternaryNode0));
      assertFalse(ternaryNode3.equals((Object)ternaryNode2));
      assertFalse(ternaryNode3.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertEquals(1, ternaryNode2.getHeight());
      assertFalse(ternaryNode2.hasLeftChild());
      assertTrue(ternaryNode2.isLeaf());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasRightChild());
      assertFalse(ternaryNode3.hasLeftChild());
      assertTrue(ternaryNode3.isLeaf());
      
      ternaryTree1.setRootNode((TernaryNode<String>) null);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      
      ternaryTree1.setTree("net.mooctet.EmptyTreeException", (TernaryTreeInterface<String>) null, (TernaryTreeInterface<String>) ternaryTree1, (TernaryTreeInterface<String>) ternaryTree0);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertFalse(ternaryTree1.isEmpty());
      
      TernaryNode<String> ternaryNode5 = new TernaryNode<String>("net.mooctet.EmptyTreeException");
      assertNotNull(ternaryNode5);
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode0));
      assertFalse(ternaryNode5.equals((Object)ternaryNode1));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasRightChild());
      assertEquals(1, ternaryNode5.getHeight());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      
      TernaryTree<TernaryNode<String>> ternaryTree2 = new TernaryTree<TernaryNode<String>>(ternaryNode5, (TernaryTree<TernaryNode<String>>) null, (TernaryTree<TernaryNode<String>>) null, (TernaryTree<TernaryNode<String>>) null);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode0));
      assertFalse(ternaryNode5.equals((Object)ternaryNode1));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasRightChild());
      assertEquals(1, ternaryNode5.getHeight());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      
      ternaryTree2.iterativePreorderTraverse();
      assertNotSame(ternaryNode5, ternaryNode2);
      assertNotSame(ternaryNode5, ternaryNode3);
      assertNotSame(ternaryNode5, ternaryNode0);
      assertNotSame(ternaryNode5, ternaryNode1);
      assertFalse(ternaryNode5.equals((Object)ternaryNode2));
      assertFalse(ternaryNode5.equals((Object)ternaryNode3));
      assertFalse(ternaryNode5.equals((Object)ternaryNode0));
      assertFalse(ternaryNode5.equals((Object)ternaryNode1));
      assertFalse(ternaryNode5.hasMiddleChild());
      assertFalse(ternaryNode5.hasRightChild());
      assertEquals(1, ternaryNode5.getHeight());
      assertEquals(1, ternaryNode5.getNumberOfNodes());
      assertFalse(ternaryNode5.hasLeftChild());
      assertTrue(ternaryNode5.isLeaf());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      
      TernaryTree<Integer> ternaryTree3 = new TernaryTree<Integer>(integer0);
      assertNotNull(ternaryTree3);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      assertEquals(1, ternaryTree3.getHeight());
      
      Iterator<Integer> iterator0 = ternaryTree3.getPreorderIterator();
      assertNotNull(iterator0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      assertEquals(1, ternaryTree3.getHeight());
      
      TernaryNode<Object> ternaryNode6 = new TernaryNode<Object>();
      assertNotNull(ternaryNode6);
      assertFalse(ternaryNode6.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasMiddleChild());
      
      TernaryTree<TernaryNode<Object>> ternaryTree4 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree4);
      assertTrue(ternaryTree4.isEmpty());
      
      TernaryTree<TernaryNode<Object>> ternaryTree5 = new TernaryTree<TernaryNode<Object>>(ternaryNode6, ternaryTree4, ternaryTree4, ternaryTree4);
      assertNotNull(ternaryTree5);
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryNode6.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertTrue(ternaryTree4.isEmpty());
      assertEquals(1, ternaryTree5.getNumberOfNodes());
      assertFalse(ternaryTree5.isEmpty());
      assertEquals(1, ternaryTree5.getHeight());
      
      Iterator<TernaryNode<Object>> iterator1 = ternaryTree5.getLevelOrderIterator();
      assertNotSame(ternaryTree4, ternaryTree5);
      assertNotSame(ternaryTree5, ternaryTree4);
      assertNotNull(iterator1);
      assertFalse(ternaryTree4.equals((Object)ternaryTree5));
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryNode6.hasRightChild());
      assertTrue(ternaryNode6.isLeaf());
      assertEquals(1, ternaryNode6.getNumberOfNodes());
      assertEquals(1, ternaryNode6.getHeight());
      assertFalse(ternaryNode6.hasLeftChild());
      assertFalse(ternaryNode6.hasMiddleChild());
      assertTrue(ternaryTree4.isEmpty());
      assertEquals(1, ternaryTree5.getNumberOfNodes());
      assertFalse(ternaryTree5.isEmpty());
      assertEquals(1, ternaryTree5.getHeight());
      
      // Undeclared exception!
      ternaryTree1.getHeight();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      ternaryTree0.setTree((Object) null);
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>((Object) null, ternaryTree0, ternaryTree0, ternaryTree0);
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      assertEquals(2, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      
      TernaryTree<Object> ternaryTree2 = new TernaryTree<Object>((Object) null);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertEquals(1, ternaryTree2.getHeight());
      
      ternaryTree0.setTree((Object) ternaryTree0, (TernaryTreeInterface<Object>) ternaryTree2, (TernaryTreeInterface<Object>) ternaryTree0, (TernaryTreeInterface<Object>) ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      ternaryTree0.setTree((Object) null);
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>(ternaryTree0);
      assertNotNull(ternaryNode0);
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      
      TernaryNode<Object> ternaryNode1 = ternaryNode0.copy();
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotNull(ternaryNode1);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(2, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertEquals(2, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      
      ternaryNode0.setMiddleChild(ternaryNode1);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertFalse(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasLeftChild());
      assertEquals(2, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertEquals(2, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasLeftChild());
      assertTrue(ternaryNode1.isLeaf());
      assertFalse(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.hasMiddleChild());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>();
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<Object> ternaryTree2 = new TernaryTree<Object>((Object) null);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertEquals(1, ternaryTree2.getHeight());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertFalse(ternaryTree2.isEmpty());
      
      ternaryTree0.setTree((Object) ternaryTree1, (TernaryTreeInterface<Object>) ternaryTree2, (TernaryTreeInterface<Object>) ternaryTree1, (TernaryTreeInterface<Object>) ternaryTree0);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      ternaryTree0.iterativePreorderTraverse();
      assertTrue(ternaryTree0.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertTrue(ternaryTree0.isEmpty());
      
      boolean boolean0 = ternaryTree0.isEmpty();
      assertTrue(boolean0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<String> ternaryTree2 = new TernaryTree<String>();
      assertNotNull(ternaryTree2);
      assertTrue(ternaryTree2.isEmpty());
      
      ternaryTree2.clear();
      assertTrue(ternaryTree2.isEmpty());
      
      TernaryTree<String> ternaryTree3 = new TernaryTree<String>("net.mooctest.TernaryTree$PostorderIterator");
      assertNotNull(ternaryTree3);
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      
      ternaryTree1.setTree((Object) ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      
      TernaryTree<String> ternaryTree4 = new TernaryTree<String>("NR ");
      assertNotNull(ternaryTree4);
      assertFalse(ternaryTree4.equals((Object)ternaryTree2));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertEquals(1, ternaryTree4.getHeight());
      assertFalse(ternaryTree4.isEmpty());
      
      TernaryTree<String> ternaryTree5 = new TernaryTree<String>("(Gu|;93[^5", ternaryTree4, ternaryTree2, ternaryTree4);
      assertNotNull(ternaryTree5);
      assertFalse(ternaryTree2.equals((Object)ternaryTree4));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree4.equals((Object)ternaryTree2));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryTree5.equals((Object)ternaryTree2));
      assertFalse(ternaryTree5.equals((Object)ternaryTree3));
      assertTrue(ternaryTree2.isEmpty());
      assertTrue(ternaryTree4.isEmpty());
      assertEquals(2, ternaryTree5.getHeight());
      assertEquals(3, ternaryTree5.getNumberOfNodes());
      assertFalse(ternaryTree5.isEmpty());
      
      ternaryTree2.setTree("(Gu|;93[^5", (TernaryTreeInterface<String>) ternaryTree2, (TernaryTreeInterface<String>) ternaryTree3, (TernaryTreeInterface<String>) ternaryTree5);
      assertNotSame(ternaryTree2, ternaryTree4);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree5);
      assertNotSame(ternaryTree3, ternaryTree5);
      assertNotSame(ternaryTree3, ternaryTree4);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotSame(ternaryTree4, ternaryTree5);
      assertNotSame(ternaryTree4, ternaryTree2);
      assertNotSame(ternaryTree4, ternaryTree3);
      assertNotSame(ternaryTree5, ternaryTree4);
      assertNotSame(ternaryTree5, ternaryTree2);
      assertNotSame(ternaryTree5, ternaryTree3);
      assertFalse(ternaryTree2.equals((Object)ternaryTree4));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree5));
      assertFalse(ternaryTree3.equals((Object)ternaryTree5));
      assertFalse(ternaryTree3.equals((Object)ternaryTree4));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree4.equals((Object)ternaryTree5));
      assertFalse(ternaryTree4.equals((Object)ternaryTree2));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryTree5.equals((Object)ternaryTree2));
      assertFalse(ternaryTree5.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.isEmpty());
      assertTrue(ternaryTree3.isEmpty());
      assertTrue(ternaryTree4.isEmpty());
      assertTrue(ternaryTree5.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<TernaryTree<Object>> ternaryTree1 = new TernaryTree<TernaryTree<Object>>(ternaryTree0);
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      
      TernaryTree<TernaryTree<Object>> ternaryTree2 = new TernaryTree<TernaryTree<Object>>(ternaryTree0, ternaryTree1, ternaryTree1, ternaryTree1);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(2, ternaryTree2.getHeight());
      assertEquals(4, ternaryTree2.getNumberOfNodes());
      
      Iterator<TernaryTree<Object>> iterator0 = ternaryTree2.getPostorderIterator();
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotNull(iterator0);
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(2, ternaryTree2.getHeight());
      assertEquals(4, ternaryTree2.getNumberOfNodes());
      
      TernaryNode<TernaryTree<Object>> ternaryNode0 = ternaryTree2.getRootNode();
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotNull(ternaryNode0);
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(2, ternaryTree2.getHeight());
      assertEquals(4, ternaryTree2.getNumberOfNodes());
      assertTrue(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.isLeaf());
      assertEquals(4, ternaryNode0.getNumberOfNodes());
      assertTrue(ternaryNode0.hasRightChild());
      assertTrue(ternaryNode0.hasLeftChild());
      assertEquals(2, ternaryNode0.getHeight());
      
      Iterator<TernaryTree<Object>> iterator1 = ternaryTree2.getPreorderIterator();
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotNull(iterator1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(2, ternaryTree2.getHeight());
      assertEquals(4, ternaryTree2.getNumberOfNodes());
      
      TernaryTree<String> ternaryTree3 = new TernaryTree<String>("mL_T");
      assertNotNull(ternaryTree3);
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      
      ternaryTree3.iterativePreorderTraverse();
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      
      ternaryTree0.clear();
      assertTrue(ternaryTree0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<TernaryTree<String>> ternaryTree1 = new TernaryTree<TernaryTree<String>>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryNode<TernaryTree<String>> ternaryNode0 = ternaryTree1.getRootNode();
      assertNull(ternaryNode0);
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<String> ternaryTree2 = new TernaryTree<String>("net.mooctest.TernaryTree$PreorderIterator");
      assertNotNull(ternaryTree2);
      assertEquals(1, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      
      ternaryTree2.setRootData("7:w,cWDU6oHyQA ");
      assertEquals(1, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      
      ternaryTree2.setTree("net.mooctest.TernaryTree$PreorderIterator");
      assertEquals(1, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      
      int int0 = ternaryTree2.getNumberOfNodes();
      assertEquals(1, int0);
      assertEquals(1, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getHeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      ternaryTree0.iterativePreorderTraverse();
      assertTrue(ternaryTree0.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertTrue(ternaryTree0.isEmpty());
      
      boolean boolean0 = ternaryTree0.isEmpty();
      assertTrue(boolean0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<String> ternaryTree2 = new TernaryTree<String>();
      assertNotNull(ternaryTree2);
      assertTrue(ternaryTree2.isEmpty());
      
      ternaryTree2.clear();
      assertTrue(ternaryTree2.isEmpty());
      
      TernaryTree<String> ternaryTree3 = new TernaryTree<String>("net.mooctest.TernaryTree$PostorderIterator");
      assertNotNull(ternaryTree3);
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      
      TernaryTree<String> ternaryTree4 = new TernaryTree<String>("net.mooctest.TernaryTree$PostorderIterator", ternaryTree2, ternaryTree2, ternaryTree3);
      assertNotNull(ternaryTree4);
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertFalse(ternaryTree4.equals((Object)ternaryTree2));
      assertTrue(ternaryTree2.isEmpty());
      assertTrue(ternaryTree3.isEmpty());
      assertFalse(ternaryTree4.isEmpty());
      assertEquals(2, ternaryTree4.getHeight());
      assertEquals(2, ternaryTree4.getNumberOfNodes());
      
      ternaryTree1.setTree((Object) ternaryTree4);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree4);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotSame(ternaryTree3, ternaryTree4);
      assertNotSame(ternaryTree4, ternaryTree3);
      assertNotSame(ternaryTree4, ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree4));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree4));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertFalse(ternaryTree4.equals((Object)ternaryTree2));
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertTrue(ternaryTree2.isEmpty());
      assertTrue(ternaryTree3.isEmpty());
      assertFalse(ternaryTree4.isEmpty());
      assertEquals(2, ternaryTree4.getHeight());
      assertEquals(2, ternaryTree4.getNumberOfNodes());
      
      TernaryTree<String> ternaryTree5 = new TernaryTree<String>("NR ");
      assertNotNull(ternaryTree5);
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryTree5.equals((Object)ternaryTree3));
      assertFalse(ternaryTree5.equals((Object)ternaryTree2));
      assertFalse(ternaryTree5.isEmpty());
      assertEquals(1, ternaryTree5.getNumberOfNodes());
      assertEquals(1, ternaryTree5.getHeight());
      
      TernaryTree<String> ternaryTree6 = new TernaryTree<String>("", ternaryTree5, ternaryTree2, ternaryTree5);
      assertNotNull(ternaryTree6);
      assertFalse(ternaryTree2.equals((Object)ternaryTree5));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree4));
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryTree5.equals((Object)ternaryTree3));
      assertFalse(ternaryTree5.equals((Object)ternaryTree2));
      assertFalse(ternaryTree6.equals((Object)ternaryTree2));
      assertFalse(ternaryTree6.equals((Object)ternaryTree4));
      assertFalse(ternaryTree6.equals((Object)ternaryTree5));
      assertFalse(ternaryTree6.equals((Object)ternaryTree3));
      assertTrue(ternaryTree2.isEmpty());
      assertTrue(ternaryTree5.isEmpty());
      assertEquals(2, ternaryTree6.getHeight());
      assertEquals(3, ternaryTree6.getNumberOfNodes());
      assertFalse(ternaryTree6.isEmpty());
      
      ternaryTree2.setTree("(Gu|;93[^5", (TernaryTreeInterface<String>) ternaryTree4, (TernaryTreeInterface<String>) ternaryTree3, (TernaryTreeInterface<String>) ternaryTree6);
      assertNotSame(ternaryTree2, ternaryTree5);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree4);
      assertNotSame(ternaryTree2, ternaryTree6);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotSame(ternaryTree3, ternaryTree4);
      assertNotSame(ternaryTree3, ternaryTree5);
      assertNotSame(ternaryTree3, ternaryTree6);
      assertNotSame(ternaryTree4, ternaryTree6);
      assertNotSame(ternaryTree4, ternaryTree3);
      assertNotSame(ternaryTree4, ternaryTree5);
      assertNotSame(ternaryTree4, ternaryTree2);
      assertNotSame(ternaryTree5, ternaryTree4);
      assertNotSame(ternaryTree5, ternaryTree6);
      assertNotSame(ternaryTree5, ternaryTree3);
      assertNotSame(ternaryTree5, ternaryTree2);
      assertNotSame(ternaryTree6, ternaryTree2);
      assertNotSame(ternaryTree6, ternaryTree4);
      assertNotSame(ternaryTree6, ternaryTree5);
      assertNotSame(ternaryTree6, ternaryTree3);
      assertFalse(ternaryTree2.equals((Object)ternaryTree5));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree4));
      assertFalse(ternaryTree2.equals((Object)ternaryTree6));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree4));
      assertFalse(ternaryTree3.equals((Object)ternaryTree5));
      assertFalse(ternaryTree3.equals((Object)ternaryTree6));
      assertFalse(ternaryTree4.equals((Object)ternaryTree6));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertFalse(ternaryTree4.equals((Object)ternaryTree5));
      assertFalse(ternaryTree4.equals((Object)ternaryTree2));
      assertFalse(ternaryTree5.equals((Object)ternaryTree4));
      assertFalse(ternaryTree5.equals((Object)ternaryTree6));
      assertFalse(ternaryTree5.equals((Object)ternaryTree3));
      assertFalse(ternaryTree5.equals((Object)ternaryTree2));
      assertFalse(ternaryTree6.equals((Object)ternaryTree2));
      assertFalse(ternaryTree6.equals((Object)ternaryTree4));
      assertFalse(ternaryTree6.equals((Object)ternaryTree5));
      assertFalse(ternaryTree6.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(3, ternaryTree2.getHeight());
      assertEquals(6, ternaryTree2.getNumberOfNodes());
      assertTrue(ternaryTree3.isEmpty());
      assertTrue(ternaryTree4.isEmpty());
      assertTrue(ternaryTree5.isEmpty());
      assertTrue(ternaryTree6.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TernaryTree<TernaryNode<Object>> ternaryTree0 = new TernaryTree<TernaryNode<Object>>((TernaryNode<Object>) null);
      assertNotNull(ternaryTree0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      ternaryTree0.setTree((TernaryNode<Object>) null);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      TernaryTree<TernaryNode<Object>> ternaryTree1 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<TernaryNode<Object>> ternaryTree2 = new TernaryTree<TernaryNode<Object>>((TernaryNode<Object>) null, ternaryTree0, ternaryTree0, ternaryTree1);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertEquals(3, ternaryTree2.getNumberOfNodes());
      assertEquals(2, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      
      Iterator<TernaryNode<Object>> iterator0 = ternaryTree2.getLevelOrderIterator();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotNull(iterator0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertEquals(3, ternaryTree2.getNumberOfNodes());
      assertEquals(2, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      
      Iterator<TernaryNode<Object>> iterator1 = ternaryTree2.getLevelOrderIterator();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotSame(iterator1, iterator0);
      assertNotNull(iterator1);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertEquals(3, ternaryTree2.getNumberOfNodes());
      assertEquals(2, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      
      TernaryTree<String> ternaryTree3 = new TernaryTree<String>();
      assertNotNull(ternaryTree3);
      assertTrue(ternaryTree3.isEmpty());
      
      TernaryTree<String> ternaryTree4 = new TernaryTree<String>("&,0<V!H<TUlt2>6s!`", ternaryTree3, ternaryTree3, ternaryTree3);
      assertNotNull(ternaryTree4);
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertTrue(ternaryTree3.isEmpty());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertEquals(1, ternaryTree4.getHeight());
      assertFalse(ternaryTree4.isEmpty());
      
      Iterator<String> iterator2 = ternaryTree4.getPostorderIterator();
      assertNotSame(ternaryTree3, ternaryTree4);
      assertNotSame(ternaryTree4, ternaryTree3);
      assertNotNull(iterator2);
      assertFalse(ternaryTree3.equals((Object)ternaryTree4));
      assertFalse(ternaryTree4.equals((Object)ternaryTree3));
      assertTrue(ternaryTree3.isEmpty());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertEquals(1, ternaryTree4.getHeight());
      assertFalse(ternaryTree4.isEmpty());
      
      TernaryTree<Object> ternaryTree5 = new TernaryTree<Object>();
      assertNotNull(ternaryTree5);
      assertTrue(ternaryTree5.isEmpty());
      
      ternaryTree5.setRootNode((TernaryNode<Object>) null);
      assertTrue(ternaryTree5.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree5.getNumberOfNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("~sx7oj3D4HkCC");
      assertNotNull(ternaryTree0);
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      
      Iterator<String> iterator0 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>(ternaryTree0);
      assertNotNull(ternaryTree1);
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      
      Integer integer0 = new Integer(136);
      assertNotNull(integer0);
      assertEquals(136, (int)integer0);
      
      TernaryTree<Integer> ternaryTree2 = new TernaryTree<Integer>(integer0);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      
      Object object0 = ternaryTree2.getRootData();
      assertNotNull(object0);
      assertEquals(136, object0);
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      
      ternaryTree1.setRootData(object0);
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("KkwEj~");
      assertNotNull(ternaryTree0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      Iterator<String> iterator0 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      Iterator<String> iterator1 = ternaryTree0.getPreorderIterator();
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      Iterator<String> iterator2 = ternaryTree0.getPostorderIterator();
      assertNotNull(iterator2);
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      ternaryTree0.setTree("");
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      boolean boolean0 = ternaryTree0.isEmpty();
      assertFalse(boolean0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>("KkwEj~");
      assertNotNull(ternaryTree1);
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      
      Iterator<Object> iterator3 = ternaryTree1.getPostorderIterator();
      assertNotNull(iterator3);
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      
      TernaryTree<TernaryNode<Object>> ternaryTree2 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree2);
      assertTrue(ternaryTree2.isEmpty());
      
      Iterator<TernaryNode<Object>> iterator4 = ternaryTree2.getPreorderIterator();
      assertNotNull(iterator4);
      assertTrue(ternaryTree2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Integer integer0 = new Integer((-1464));
      assertNotNull(integer0);
      assertEquals((-1464), (int)integer0);
      
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>(integer0);
      assertNotNull(ternaryTree0);
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree0.getPostorderIterator();
      assertNotNull(iterator0);
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<String> ternaryTree2 = new TernaryTree<String>("");
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertEquals(1, ternaryTree2.getHeight());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertFalse(ternaryTree2.isEmpty());
      
      TernaryTree<String> ternaryTree3 = new TernaryTree<String>("", ternaryTree1, ternaryTree2, ternaryTree2);
      assertNotNull(ternaryTree3);
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree1));
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertEquals(3, ternaryTree3.getNumberOfNodes());
      assertEquals(2, ternaryTree3.getHeight());
      assertFalse(ternaryTree3.isEmpty());
      
      ternaryTree3.setTree("");
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotSame(ternaryTree3, ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree1));
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      TernaryTree<Integer> ternaryTree1 = new TernaryTree<Integer>(integer1, ternaryTree0, ternaryTree0, ternaryTree0);
      assertNotNull(ternaryTree1);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      
      Integer integer2 = new Integer(1);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1, (int)integer2);
      
      TernaryTree<Integer> ternaryTree2 = new TernaryTree<Integer>(integer2);
      assertNotNull(ternaryTree2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      
      TernaryTree<Integer> ternaryTree3 = new TernaryTree<Integer>(integer0, ternaryTree0, ternaryTree1, ternaryTree2);
      assertNotNull(ternaryTree3);
      assertTrue(integer0.equals((Object)integer1));
      assertFalse(integer0.equals((Object)integer2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)integer2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree3.equals((Object)ternaryTree1));
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertFalse(ternaryTree3.isEmpty());
      assertEquals(3, ternaryTree3.getNumberOfNodes());
      assertEquals(2, ternaryTree3.getHeight());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("~");
      assertNotNull(ternaryTree0);
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>("~", ternaryTree0, ternaryTree0, ternaryTree0);
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      
      ternaryTree1.iterativePreorderTraverse();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      
      Iterator<String> iterator0 = ternaryTree1.getPreorderIterator();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotNull(iterator0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      
      ternaryTree0.iterativePreorderTraverse();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getHeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>("", ternaryTree0, ternaryTree0, ternaryTree0);
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      
      ternaryTree1.setTree("Zo[ZY^``zQ");
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      
      TernaryTree<String> ternaryTree2 = new TernaryTree<String>();
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertTrue(ternaryTree2.isEmpty());
      
      ternaryTree0.setTree("", (TernaryTreeInterface<String>) ternaryTree1, (TernaryTreeInterface<String>) ternaryTree1, (TernaryTreeInterface<String>) ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertEquals(3, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree0.getHeight());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      
      int int0 = ternaryTree0.getHeight();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertEquals(2, int0);
      assertEquals(3, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree0.getHeight());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      Integer integer0 = new Integer(1);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      
      TernaryTree<Integer> ternaryTree1 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree1);
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<Integer> ternaryTree2 = new TernaryTree<Integer>(integer0);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(1, ternaryTree2.getHeight());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      
      TernaryTree<Integer> ternaryTree3 = new TernaryTree<Integer>(integer0, ternaryTree1, ternaryTree2, ternaryTree0);
      assertNotNull(ternaryTree3);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertFalse(ternaryTree3.isEmpty());
      assertEquals(2, ternaryTree3.getNumberOfNodes());
      assertEquals(2, ternaryTree3.getHeight());
      
      ternaryTree0.setTree(integer0, (TernaryTreeInterface<Integer>) ternaryTree1, (TernaryTreeInterface<Integer>) ternaryTree1, (TernaryTreeInterface<Integer>) ternaryTree3);
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree3);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree1, ternaryTree3);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertNotSame(ternaryTree1, ternaryTree2);
      assertNotSame(ternaryTree2, ternaryTree1);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotSame(ternaryTree3, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree1);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree3));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree1.equals((Object)ternaryTree3));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree1));
      assertEquals(3, ternaryTree0.getNumberOfNodes());
      assertEquals(3, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertTrue(ternaryTree3.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree0.getPostorderIterator();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree0, ternaryTree3);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotNull(iterator0);
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree0.equals((Object)ternaryTree3));
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertEquals(3, ternaryTree0.getNumberOfNodes());
      assertEquals(3, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TernaryTree<TernaryNode<Object>> ternaryTree0 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      ternaryTree0.clear();
      assertTrue(ternaryTree0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getRootData();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TernaryTree<TernaryNode<Object>> ternaryTree0 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      String string0 = "net.mooctest.TernaryTree$LevelOrderIterator";
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>("net.mooctest.TernaryTree$LevelOrderIterator");
      assertNotNull(ternaryNode0);
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      
      TernaryNode<Object> ternaryNode1 = new TernaryNode<Object>();
      assertNotNull(ternaryNode1);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      
      TernaryNode<Object> ternaryNode2 = new TernaryNode<Object>(integer0, ternaryNode0, ternaryNode1, ternaryNode1);
      assertNotNull(ternaryNode2);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertEquals(2, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.hasLeftChild());
      
      ternaryTree0.setTree(ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode0, ternaryNode1);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertFalse(ternaryNode0.equals((Object)ternaryNode2));
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode1.hasRightChild());
      assertTrue(ternaryNode1.isLeaf());
      assertEquals(1, ternaryNode1.getHeight());
      assertEquals(1, ternaryNode1.getNumberOfNodes());
      assertFalse(ternaryNode1.hasMiddleChild());
      assertTrue(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.isLeaf());
      assertTrue(ternaryNode2.hasMiddleChild());
      assertEquals(4, ternaryNode2.getNumberOfNodes());
      assertEquals(2, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.hasLeftChild());
      
      Iterator<TernaryNode<Object>> iterator0 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree1.setRootData((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      boolean boolean0 = ternaryTree0.isEmpty();
      assertTrue(boolean0);
      assertTrue(ternaryTree0.isEmpty());
      
      Integer integer0 = new Integer((-2155));
      assertNotNull(integer0);
      assertEquals((-2155), (int)integer0);
      
      TernaryTree<Integer> ternaryTree1 = new TernaryTree<Integer>(integer0);
      assertNotNull(ternaryTree1);
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      
      int int0 = ternaryTree1.getNumberOfNodes();
      assertEquals(1, int0);
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      
      String string0 = "]dp-(SpMXAy\\<!Zq";
      TernaryTree<String> ternaryTree2 = new TernaryTree<String>();
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertTrue(ternaryTree2.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree1.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      
      TernaryTree<String> ternaryTree3 = new TernaryTree<String>("]dp-(SpMXAy<!Zq");
      assertNotNull(ternaryTree3);
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      
      Iterator<String> iterator1 = ternaryTree3.getPostorderIterator();
      assertNotSame(ternaryTree3, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotNull(iterator1);
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertEquals(1, ternaryTree3.getHeight());
      assertEquals(1, ternaryTree3.getNumberOfNodes());
      assertFalse(ternaryTree3.isEmpty());
      
      ternaryTree0.setTree("]dp-(SpMXAy<!Zq", (TernaryTreeInterface<String>) ternaryTree2, (TernaryTreeInterface<String>) ternaryTree2, (TernaryTreeInterface<String>) ternaryTree3);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree0.getHeight());
      assertEquals(2, ternaryTree0.getNumberOfNodes());
      assertTrue(ternaryTree2.isEmpty());
      assertTrue(ternaryTree3.isEmpty());
      
      Iterator<String> iterator2 = ternaryTree0.getPreorderIterator();
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree3);
      assertNotNull(iterator2);
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree3));
      assertFalse(iterator2.equals((Object)iterator1));
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree0.getHeight());
      assertEquals(2, ternaryTree0.getNumberOfNodes());
      
      Integer integer1 = new Integer((-1));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals((-1), (int)integer1);
      
      TernaryTree<Object> ternaryTree4 = new TernaryTree<Object>(integer1);
      assertNotNull(ternaryTree4);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, ternaryTree4.getHeight());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertFalse(ternaryTree4.isEmpty());
      
      int int1 = ternaryTree4.getHeight();
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      assertEquals(1, ternaryTree4.getHeight());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertFalse(ternaryTree4.isEmpty());
      
      Iterator<String> iterator3 = ternaryTree3.getPreorderIterator();
      assertNotSame(ternaryTree3, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotSame(iterator3, iterator2);
      assertNotNull(iterator3);
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(iterator3.equals((Object)iterator1));
      assertFalse(iterator3.equals((Object)iterator2));
      assertTrue(ternaryTree3.isEmpty());
      
      Iterator<String> iterator4 = ternaryTree3.getLevelOrderIterator();
      assertNotSame(ternaryTree3, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertNotNull(iterator4);
      assertFalse(iterator4.equals((Object)iterator3));
      assertFalse(iterator4.equals((Object)iterator1));
      assertFalse(iterator4.equals((Object)iterator2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertTrue(ternaryTree3.isEmpty());
      
      int int2 = ternaryTree0.getNumberOfNodes();
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree3);
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree3));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(2, int2);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree0.getHeight());
      assertEquals(2, ternaryTree0.getNumberOfNodes());
      
      ternaryTree3.setTree("]dp-(SpMXAy<!Zq", (TernaryTreeInterface<String>) ternaryTree0, (TernaryTreeInterface<String>) ternaryTree2, (TernaryTreeInterface<String>) ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree2);
      assertNotSame(ternaryTree0, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree3);
      assertNotSame(ternaryTree2, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree0);
      assertNotSame(ternaryTree3, ternaryTree2);
      assertFalse(ternaryTree0.equals((Object)ternaryTree2));
      assertFalse(ternaryTree0.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree3));
      assertFalse(ternaryTree2.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree0));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertEquals(3, ternaryTree3.getNumberOfNodes());
      assertEquals(3, ternaryTree3.getHeight());
      assertFalse(ternaryTree3.isEmpty());
      
      TernaryTree<TernaryNode<Object>> ternaryTree5 = new TernaryTree<TernaryNode<Object>>((TernaryNode<Object>) null, (TernaryTree<TernaryNode<Object>>) null, (TernaryTree<TernaryNode<Object>>) null, (TernaryTree<TernaryNode<Object>>) null);
      assertNotNull(ternaryTree5);
      assertEquals(1, ternaryTree5.getNumberOfNodes());
      assertFalse(ternaryTree5.isEmpty());
      assertEquals(1, ternaryTree5.getHeight());
      
      TernaryNode<Object> ternaryNode0 = ternaryTree5.getRootData();
      assertNull(ternaryNode0);
      assertEquals(1, ternaryTree5.getNumberOfNodes());
      assertFalse(ternaryTree5.isEmpty());
      assertEquals(1, ternaryTree5.getHeight());
      
      ternaryTree4.iterativePreorderTraverse();
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, ternaryTree4.getHeight());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertFalse(ternaryTree4.isEmpty());
      
      ternaryTree4.iterativePreorderTraverse();
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, ternaryTree4.getHeight());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertFalse(ternaryTree4.isEmpty());
      
      Iterator<Object> iterator5 = ternaryTree4.getPostorderIterator();
      assertNotNull(iterator5);
      assertFalse(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1, ternaryTree4.getHeight());
      assertEquals(1, ternaryTree4.getNumberOfNodes());
      assertFalse(ternaryTree4.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree5.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("net.mooctest.TernaryTree");
      assertNotNull(ternaryTree0);
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      ternaryTree0.setRootData("E?IUkM)Igs");
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>((String) null);
      assertNotNull(ternaryTree0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      assertNotNull(ternaryNode0);
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
      
      ternaryTree0.setRootNode(ternaryNode0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasLeftChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode0.isLeaf());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(989);
      assertNotNull(integer0);
      assertEquals(989, (int)integer0);
      
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>(integer0);
      assertNotNull(ternaryTree0);
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator0);
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      assertFalse(ternaryTree0.isEmpty());
      
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      ternaryTree1.setTree((String) null);
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertEquals(1, ternaryTree1.getHeight());
      assertFalse(ternaryTree1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TernaryTree<TernaryNode<Object>> ternaryTree0 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      Iterator<TernaryNode<Object>> iterator0 = ternaryTree0.getPreorderIterator();
      assertNotNull(iterator0);
      assertTrue(ternaryTree0.isEmpty());
      
      Iterator<TernaryNode<Object>> iterator1 = ternaryTree0.getLevelOrderIterator();
      assertNotNull(iterator1);
      assertFalse(iterator1.equals((Object)iterator0));
      assertTrue(ternaryTree0.isEmpty());
      
      Iterator<TernaryNode<Object>> iterator2 = ternaryTree0.getLevelOrderIterator();
      assertNotSame(iterator2, iterator1);
      assertNotNull(iterator2);
      assertFalse(iterator2.equals((Object)iterator0));
      assertFalse(iterator2.equals((Object)iterator1));
      assertTrue(ternaryTree0.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getRootData();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      Iterator<Integer> iterator0 = ternaryTree0.getPostorderIterator();
      assertNotNull(iterator0);
      assertTrue(ternaryTree0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("net.mooctest.TernaryTree$PreorderIterator");
      assertNotNull(ternaryTree0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      Iterator<String> iterator0 = ternaryTree0.getPreorderIterator();
      assertNotNull(iterator0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      TernaryNode<String> ternaryNode0 = ternaryTree0.getRootNode();
      assertNotNull(ternaryNode0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertEquals(1, ternaryNode0.getHeight());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasLeftChild());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(2518);
      assertNotNull(integer0);
      assertEquals(2518, (int)integer0);
      
      Integer integer1 = new Integer(2518);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(2518, (int)integer1);
      
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>(integer1);
      assertNotNull(ternaryTree0);
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      TernaryTree<Integer> ternaryTree1 = new TernaryTree<Integer>(integer0, ternaryTree0, ternaryTree0, ternaryTree0);
      assertNotNull(ternaryTree1);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree1.getHeight());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      
      int int0 = ternaryTree1.getNumberOfNodes();
      assertNotSame(ternaryTree0, ternaryTree1);
      assertNotSame(ternaryTree1, ternaryTree0);
      assertTrue(integer0.equals((Object)integer1));
      assertTrue(integer1.equals((Object)integer0));
      assertFalse(ternaryTree0.equals((Object)ternaryTree1));
      assertFalse(ternaryTree1.equals((Object)ternaryTree0));
      assertEquals(4, int0);
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(2, ternaryTree1.getHeight());
      assertEquals(4, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>((Object) null);
      assertNotNull(ternaryTree0);
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      ternaryTree0.iterativePreorderTraverse();
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryTree0.getHeight());
      
      TernaryTree<Integer> ternaryTree1 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree1.getHeight();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>((Object) null);
      assertNotNull(ternaryNode0);
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      
      TernaryNode<Object> ternaryNode1 = new TernaryNode<Object>((Object) null, ternaryNode0, ternaryNode0, ternaryNode0);
      assertNotNull(ternaryNode1);
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      
      TernaryNode<Object> ternaryNode2 = ternaryNode1.getRightChild();
      assertNotSame(ternaryNode0, ternaryNode1);
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotNull(ternaryNode2);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.isLeaf());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>(ternaryNode2);
      assertNotNull(ternaryTree0);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.isLeaf());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      
      TernaryNode ternaryNode3 = (TernaryNode)ternaryTree0.getRootData();
      assertNotSame(ternaryNode0, ternaryNode1);
      assertSame(ternaryNode0, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode2);
      assertNotSame(ternaryNode1, ternaryNode0);
      assertSame(ternaryNode2, ternaryNode0);
      assertNotSame(ternaryNode2, ternaryNode1);
      assertNotNull(ternaryNode3);
      assertFalse(ternaryNode0.equals((Object)ternaryNode1));
      assertFalse(ternaryNode1.equals((Object)ternaryNode2));
      assertFalse(ternaryNode1.equals((Object)ternaryNode0));
      assertFalse(ternaryNode2.equals((Object)ternaryNode1));
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertEquals(1, ternaryNode0.getHeight());
      assertFalse(ternaryNode0.hasRightChild());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertTrue(ternaryNode1.hasRightChild());
      assertFalse(ternaryNode1.isLeaf());
      assertEquals(4, ternaryNode1.getNumberOfNodes());
      assertTrue(ternaryNode1.hasMiddleChild());
      assertEquals(2, ternaryNode1.getHeight());
      assertTrue(ternaryNode1.hasLeftChild());
      assertFalse(ternaryNode2.hasMiddleChild());
      assertFalse(ternaryNode2.hasRightChild());
      assertFalse(ternaryNode2.hasLeftChild());
      assertEquals(1, ternaryNode2.getHeight());
      assertTrue(ternaryNode2.isLeaf());
      assertEquals(1, ternaryNode2.getNumberOfNodes());
      assertFalse(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree0.getHeight());
      assertEquals(1, ternaryTree0.getNumberOfNodes());
      assertEquals(1, ternaryNode3.getNumberOfNodes());
      assertFalse(ternaryNode3.hasRightChild());
      assertTrue(ternaryNode3.isLeaf());
      assertEquals(1, ternaryNode3.getHeight());
      assertFalse(ternaryNode3.hasMiddleChild());
      assertFalse(ternaryNode3.hasLeftChild());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TernaryTree<TernaryTree<String>> ternaryTree0 = new TernaryTree<TernaryTree<String>>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      // Undeclared exception!
      try { 
        ternaryTree0.getRootData();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryNode<Object> ternaryNode0 = new TernaryNode<Object>();
      assertNotNull(ternaryNode0);
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      
      TernaryTree<TernaryNode<Object>> ternaryTree1 = new TernaryTree<TernaryNode<Object>>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      TernaryTree<TernaryNode<Object>> ternaryTree2 = new TernaryTree<TernaryNode<Object>>(ternaryNode0);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertEquals(1, ternaryTree2.getNumberOfNodes());
      assertEquals(1, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      
      TernaryTree<TernaryNode<Object>> ternaryTree3 = new TernaryTree<TernaryNode<Object>>(ternaryNode0, ternaryTree1, ternaryTree1, ternaryTree2);
      assertNotNull(ternaryTree3);
      assertFalse(ternaryTree1.equals((Object)ternaryTree2));
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertFalse(ternaryTree3.equals((Object)ternaryTree2));
      assertFalse(ternaryTree3.equals((Object)ternaryTree1));
      assertEquals(1, ternaryNode0.getHeight());
      assertEquals(1, ternaryNode0.getNumberOfNodes());
      assertFalse(ternaryNode0.hasLeftChild());
      assertTrue(ternaryNode0.isLeaf());
      assertFalse(ternaryNode0.hasMiddleChild());
      assertFalse(ternaryNode0.hasRightChild());
      assertTrue(ternaryTree1.isEmpty());
      assertTrue(ternaryTree2.isEmpty());
      assertEquals(2, ternaryTree3.getHeight());
      assertFalse(ternaryTree3.isEmpty());
      assertEquals(2, ternaryTree3.getNumberOfNodes());
      
      // Undeclared exception!
      try { 
        ternaryTree3.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<TernaryTree<String>> ternaryTree1 = new TernaryTree<TernaryTree<String>>(ternaryTree0);
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree0.isEmpty());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      
      TernaryTree<TernaryTree<String>> ternaryTree2 = new TernaryTree<TernaryTree<String>>(ternaryTree0, ternaryTree1, ternaryTree1, ternaryTree1);
      assertNotNull(ternaryTree2);
      assertFalse(ternaryTree2.equals((Object)ternaryTree1));
      assertTrue(ternaryTree0.isEmpty());
      assertTrue(ternaryTree1.isEmpty());
      assertEquals(2, ternaryTree2.getHeight());
      assertFalse(ternaryTree2.isEmpty());
      assertEquals(4, ternaryTree2.getNumberOfNodes());
      
      // Undeclared exception!
      try { 
        ternaryTree2.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      assertNotNull(ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryTree<TernaryTree<Object>> ternaryTree1 = new TernaryTree<TernaryTree<Object>>();
      assertNotNull(ternaryTree1);
      assertTrue(ternaryTree1.isEmpty());
      
      ternaryTree1.setTree(ternaryTree0, (TernaryTreeInterface<TernaryTree<Object>>) null, (TernaryTreeInterface<TernaryTree<Object>>) null, (TernaryTreeInterface<TernaryTree<Object>>) null);
      assertTrue(ternaryTree0.isEmpty());
      assertEquals(1, ternaryTree1.getNumberOfNodes());
      assertFalse(ternaryTree1.isEmpty());
      assertEquals(1, ternaryTree1.getHeight());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Object object0 = new Object();
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>(object0, ternaryTree0, ternaryTree0, ternaryTree0);
      boolean boolean0 = ternaryTree1.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>((String) null);
      TernaryTree<TernaryTree<String>> ternaryTree1 = new TernaryTree<TernaryTree<String>>(ternaryTree0);
      assertEquals(1, ternaryTree1.getNumberOfNodes());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      TernaryNode<Object> ternaryNode0 = ternaryTree0.getRootNode();
      assertNull(ternaryNode0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TernaryTree<Object> ternaryTree0 = new TernaryTree<Object>();
      ternaryTree0.getPostorderIterator();
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>("");
      TernaryTree<TernaryNode<String>> ternaryTree1 = new TernaryTree<TernaryNode<String>>();
      TernaryTree<TernaryNode<String>> ternaryTree2 = new TernaryTree<TernaryNode<String>>(ternaryNode0, ternaryTree1, ternaryTree1, ternaryTree1);
      ternaryTree2.setTree(ternaryNode0, (TernaryTreeInterface<TernaryNode<String>>) ternaryTree2, (TernaryTreeInterface<TernaryNode<String>>) ternaryTree1, (TernaryTreeInterface<TernaryNode<String>>) ternaryTree1);
      assertFalse(ternaryTree2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("");
      TernaryTree<Object> ternaryTree1 = new TernaryTree<Object>(ternaryTree0);
      TernaryTree<Object> ternaryTree2 = new TernaryTree<Object>();
      Object object0 = new Object();
      ternaryTree1.getLevelOrderIterator();
      ternaryTree2.getPreorderIterator();
      TernaryTree<Object> ternaryTree3 = new TernaryTree<Object>(object0, ternaryTree2, ternaryTree1, ternaryTree1);
      ternaryTree1.getLevelOrderIterator();
      ternaryTree0.getRootData();
      // Undeclared exception!
      try { 
        ternaryTree0.getInorderIterator();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TernaryTree<TernaryTree<Integer>> ternaryTree0 = new TernaryTree<TernaryTree<Integer>>();
      TernaryNode<TernaryTree<Integer>> ternaryNode0 = ternaryTree0.getRootNode();
      assertNull(ternaryNode0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("net.mooctet.EmptyTGeeException");
      ternaryTree0.getNumberOfNodes();
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>("net.mooctet.EmptyTGeeException", ternaryTree0, ternaryTree0, ternaryTree0);
      assertTrue(ternaryTree0.isEmpty());
      
      TernaryNode<String> ternaryNode0 = new TernaryNode<String>();
      ternaryNode0.getLeftChild();
      ternaryTree1.setTree("net.mooctet.EmptyTGeeException", (TernaryTreeInterface<String>) ternaryTree0, (TernaryTreeInterface<String>) ternaryTree1, (TernaryTreeInterface<String>) ternaryTree0);
      TernaryTree<TernaryNode<String>> ternaryTree2 = new TernaryTree<TernaryNode<String>>(ternaryNode0, (TernaryTree<TernaryNode<String>>) null, (TernaryTree<TernaryNode<String>>) null, (TernaryTree<TernaryNode<String>>) null);
      assertFalse(ternaryTree2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(0);
      TernaryTree<Integer> ternaryTree0 = new TernaryTree<Integer>(integer0);
      TernaryNode<Integer> ternaryNode0 = new TernaryNode<Integer>(integer0);
      ternaryNode0.getMiddleChild();
      ternaryTree0.setRootNode((TernaryNode<Integer>) null);
      // Undeclared exception!
      try { 
        ternaryTree0.setRootData(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>();
      // Undeclared exception!
      try { 
        ternaryTree0.getRootData();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TernaryTree", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TernaryTree<String> ternaryTree0 = new TernaryTree<String>("~");
      assertFalse(ternaryTree0.isEmpty());
      
      TernaryTree<String> ternaryTree1 = new TernaryTree<String>("~", ternaryTree0, ternaryTree0, ternaryTree0);
      ternaryTree1.iterativePreorderTraverse();
      ternaryTree1.getPreorderIterator();
      ternaryTree1.setTree("~");
      ternaryTree0.iterativePreorderTraverse();
      ternaryTree1.getHeight();
      assertFalse(ternaryTree1.isEmpty());
  }
}
