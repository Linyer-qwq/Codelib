/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 09 10:46:24 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.BinaryHeap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BinaryHeap_ESTest extends BinaryHeap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(0);
      binaryHeap0.insert(1);
      binaryHeap0.insert(1);
      int int0 = binaryHeap0.deleteMin();
      assertFalse(binaryHeap0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert((-1));
      binaryHeap0.insert(2115);
      binaryHeap0.insert(0);
      binaryHeap0.insert((-226));
      binaryHeap0.buildHeap();
      assertFalse(binaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(0);
      binaryHeap0.insert(1);
      binaryHeap0.insert((-1195));
      binaryHeap0.insert(983);
      binaryHeap0.insert(1);
      boolean boolean0 = binaryHeap0.wellFormed();
      assertFalse(binaryHeap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(0);
      binaryHeap0.insert(1);
      binaryHeap0.insert(983);
      binaryHeap0.insert(1);
      boolean boolean0 = binaryHeap0.wellFormed();
      assertFalse(binaryHeap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(0);
      int int0 = binaryHeap0.findMin();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(673);
      binaryHeap0.insert((-886));
      binaryHeap0.insert(0);
      binaryHeap0.deleteMin();
      binaryHeap0.deleteMin();
      int int0 = binaryHeap0.findMin();
      assertFalse(binaryHeap0.isEmpty());
      assertEquals(673, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(1998);
      assertFalse(binaryHeap0.isEmpty());
      
      int int0 = binaryHeap0.deleteMin();
      assertEquals(1998, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BinaryHeap binaryHeap0 = null;
      try {
        binaryHeap0 = new BinaryHeap((-1009));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      boolean boolean0 = binaryHeap0.isFull();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap(2);
      binaryHeap0.insert(2);
      binaryHeap0.insert(2);
      boolean boolean0 = binaryHeap0.isFull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert(673);
      boolean boolean0 = binaryHeap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      boolean boolean0 = binaryHeap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert((-1));
      int int0 = binaryHeap0.findMin();
      assertFalse(binaryHeap0.isEmpty());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert((-18));
      binaryHeap0.insert((-12));
      binaryHeap0.insert((-18));
      binaryHeap0.insert((-12));
      int int0 = binaryHeap0.deleteMin();
      assertFalse(binaryHeap0.isEmpty());
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert((-18));
      binaryHeap0.insert((-12));
      binaryHeap0.insert((-18));
      binaryHeap0.insert((-18));
      int int0 = binaryHeap0.deleteMin();
      assertFalse(binaryHeap0.isEmpty());
      assertEquals((-18), int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      binaryHeap0.insert((-18));
      binaryHeap0.insert((-12));
      binaryHeap0.buildHeap();
      assertFalse(binaryHeap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      int int0 = binaryHeap0.deleteMin();
      assertEquals((-1), binaryHeap0.findMin());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap((-1));
      boolean boolean0 = binaryHeap0.wellFormed();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap();
      boolean boolean0 = binaryHeap0.wellFormed();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap(0);
      assertTrue(binaryHeap0.isEmpty());
      
      int int0 = binaryHeap0.findMin();
      assertTrue(binaryHeap0.isFull());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap(0);
      try { 
        binaryHeap0.insert(0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap((-1));
      // Undeclared exception!
      try { 
        binaryHeap0.insert(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("net.mooctest.BinaryHeap", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BinaryHeap binaryHeap0 = new BinaryHeap((-1));
      binaryHeap0.makeEmpty();
      assertTrue(binaryHeap0.isEmpty());
      assertFalse(binaryHeap0.isFull());
  }
}
