/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 18 14:26:33 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import net.mooctest.ExpressionParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExpressionParser_ESTest extends ExpressionParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(572);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.evaluate("me/8Z<K}>pt9pd;,5");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = (-1853);
      String string0 = expressionParser0.parseVariables("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals((-1853), expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(134);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.addVariable("", "Q,WXm");
      assertEquals(1, expressionParser0.numberOfVars);
      
      expressionParser0.addVariable("", "");
      assertEquals(1, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(623);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = (-2706);
      // Undeclared exception!
      try { 
        expressionParser0.addVariable("", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2706
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(2077);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.evaluate("8gH@L>R[]w`A}#");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseParenthesis("net.mooctest.ExpressionParser");
      assertNotNull(string0);
      assertEquals("net.mooctest.ExpressionParser", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(134);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseParenthesis("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1257);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseOperators("Qu4N.A(<}PxiSl@!3J");
      assertNotNull(string0);
      assertEquals("Qu4N.A(<}PxiSl@!3J", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseOperators("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1257);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseFunctions("<(s+)?");
      assertNotNull(string0);
      assertEquals("<(s+)?", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(134);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseFunctions("");
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = ExpressionParser.indexOfMatchingBracket("rjp.%;(", 1, '-', '%');
      assertEquals(4, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = ExpressionParser.adjustNumberSpacing("G8oV3>DUN,Rn+U");
      assertNotNull(string0);
      assertEquals("G 8 oV 3 >DUN,Rn+U", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ExpressionParser.adjustNumberSpacing("");
      assertNotNull(string0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(3326);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = 3326;
      String string0 = expressionParser0.parseVariables("ExpressionParserException");
      assertNotNull(string0);
      assertEquals("ExpressionParserException", string0);
      assertEquals(3326, expressionParser0.numberOfVars);
      
      String string1 = expressionParser0.parseVariables("0 =");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0  =", string1);
      assertEquals(3326, expressionParser0.numberOfVars);
      
      String string2 = expressionParser0.parseVariables("^");
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("^", string2);
      assertEquals(3326, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      expressionParser0.parseVariables("ExpressionParserException");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(3);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.parseVariables("<Ytz>");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(2);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.addVariable(")+\"-w-7l$[,(O8LYg", ")+\"-w-7l$[,(O8LYg");
      assertEquals(1, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      try { 
        expressionParser0.parseVariables("net.mooctest.FunctionNotFoundException");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6
         // <(\\s+)?)+\"-w-7l$[,(O8LYg(\\s+)?>
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      try { 
        expressionParser0.parseVariables((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(91);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = 1826;
      // Undeclared exception!
      try { 
        expressionParser0.parseVariables("jMSDCY?3&Z|G");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1257);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.parseParenthesis("<(s+)?");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(216);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.parseParenthesis("(");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1874);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = 4083;
      // Undeclared exception!
      try { 
        expressionParser0.parseParenthesis("([+-]d+(.d+)?([eE](-?)d+)?)");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(19);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      try { 
        expressionParser0.parseOperators((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(570);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.parseFunctions("(([+-]?)d+(.d+)?([eE](-?)d+)?)s+([+-]d+(.d+)?([eE](-?)d+)?)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.parseFunctions("7~C>G[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      try { 
        ExpressionParser.indexOfMatchingBracket("5", 2, '@', '@');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionParser.indexOfMatchingBracket("ctn", (-454), 'I', 'I');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionParser.indexOfMatchingBracket((String) null, 0, 'Q', 'Q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(3326);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = 3326;
      String string0 = expressionParser0.parseVariables("ExpressionParserException");
      assertNotNull(string0);
      assertEquals("ExpressionParserException", string0);
      assertEquals(3326, expressionParser0.numberOfVars);
      
      String string1 = expressionParser0.parseVariables("0 =");
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("0  =", string1);
      assertEquals(3326, expressionParser0.numberOfVars);
      
      String string2 = expressionParser0.parseVariables("^");
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals("^", string2);
      assertEquals(3326, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      expressionParser0.evaluate("g]@y^.SpwL9bq2");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(5);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.addVariable("4=pg\\0Q&kFd'Z`%)", (String) null);
      assertEquals(1, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      try { 
        expressionParser0.evaluate("df");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal octal escape sequence near index 13
         // <(\\s+)?4=pg\\0Q&kFd'Z`%)(\\s+)?>
         //              ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      // Undeclared exception!
      try { 
        expressionParser0.evaluate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(748);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.numberOfVars = 1333;
      // Undeclared exception!
      try { 
        expressionParser0.evaluate(".");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      expressionParser0.variables = null;
      // Undeclared exception!
      try { 
        expressionParser0.addVariable("T.2Vm# -Uk6s46", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExpressionParser expressionParser0 = null;
      try {
        expressionParser0 = new ExpressionParser((-3192));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(40);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.evaluate("(([+-]?)d+(.d+)?([eE](-?)d+)?)s+!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(2934);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.evaluate("0 - 0");
      assertNotNull(string0);
      assertEquals("0.0", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(3427);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.evaluate(" 3 ");
      assertNotNull(string0);
      assertEquals("3.0", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser('v');
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      try { 
        expressionParser0.parseOperators("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(104);
      assertNotNull(expressionParser0);
      assertEquals(0, expressionParser0.numberOfVars);
      
      String string0 = expressionParser0.parseVariables("n<");
      assertNotNull(string0);
      assertEquals("n<", string0);
      assertEquals(0, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(4);
      try { 
        expressionParser0.evaluate("bb;>`*&]Z0<*`ZZ>nF");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(88);
      expressionParser0.addVariable("", "");
      try { 
        expressionParser0.evaluate("s@ 8 ! 7 qO\">buMA~ 5 P+;^");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(2899);
      try { 
        expressionParser0.evaluate("1 =O sEFM0C`gVa");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(104);
      expressionParser0.addVariable("5", "5");
      expressionParser0.addVariable("6", "5");
      assertEquals(2, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      try { 
        expressionParser0.evaluate("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionParser.adjustNumberSpacing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }
}
