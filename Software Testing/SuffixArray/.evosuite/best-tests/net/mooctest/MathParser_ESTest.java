/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 18 14:24:57 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.MathParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MathParser_ESTest extends MathParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("rad", 1971.47331);
      assertEquals(34.40870037469085, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("sec", 1.0);
      assertEquals(1.8508157176809255, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(3.0, "-", 34.93216464784359);
      assertEquals((-31.932164647843592), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(2.0, "+", 85.197928);
      assertEquals(87.197928, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation((-5333.437273696757), "*", 13.353586999999607);
      assertEquals((-71220.51864335035), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(1.0729391031787462E12, "/", 1.0);
      assertEquals(1.0729391031787462E12, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = MathParser.factorial(2.0);
      assertEquals(2.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      boolean boolean0 = MathParser.isNumber("6");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathParser.solveUnaryFunction((String) null, 2.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        MathParser.solveBinaryOperation(23.932164647843592, (String) null, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      MathParser.factorial(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("log", 0.0);
      assertEquals(Double.NEGATIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("exp", (-5.948116814819386));
      assertEquals(0.0026107524222164133, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("abs", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      MathParser.solveUnaryFunction("fct", Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("deg", 10.276486979999959);
      assertEquals(588.7993321751388, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("ctn", 166.352750895035);
      assertEquals((-6.543076567215673), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("csc", 1875.28);
      assertEquals(4.0291264101137, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("tan", (-1402.550399832128));
      assertEquals((-5.800527120468165), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("cos", 1.0);
      assertEquals(0.5403023058681398, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double double0 = MathParser.solveUnaryFunction("sin", 10.276486979999959);
      assertEquals((-0.7524072313297785), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      try { 
        MathParser.solveUnaryFunction("-", 0.0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.MathParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation((-872.448042599834), "-", (-872.448042599834));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(Double.POSITIVE_INFINITY, "ExprezsionParserxception", Double.POSITIVE_INFINITY);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(2461.3980399407, "/", 2461.3980399407);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(1800.8509464826561, "%", 1.0);
      assertEquals(0.850946482656127, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      double double0 = MathParser.solveBinaryOperation(4.0291264101137, "^", 1875.28);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      double double0 = MathParser.factorial(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      double double0 = MathParser.factorial(3263.4028228018574);
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      boolean boolean0 = MathParser.isNumber("*");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MathParser mathParser0 = new MathParser();
  }
}
