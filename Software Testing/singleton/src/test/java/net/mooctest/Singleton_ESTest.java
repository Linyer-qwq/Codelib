/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 08:39:49 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.Singleton;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = false, useJEE = true)
public class Singleton_ESTest extends Singleton_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Singleton singleton0 = Singleton.getInstance();
      // Undeclared exception!
      try { 
        singleton0.testMe(0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Singleton singleton0 = Singleton.getInstance();
      // Undeclared exception!
      try { 
        singleton0.testMe(1);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Singleton singleton0 = Singleton.getInstance();
      // Undeclared exception!
      try { 
        singleton0.testMe((-1));
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Singleton singleton0 = Singleton.getInstance();
      String string0 = singleton0.getName();
      assertEquals("Highlander", string0);
      assertEquals(1, singleton0.getInstanceCount());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Singleton singleton0 = Singleton.getInstance();
      int int0 = singleton0.getInstanceCount();
      assertEquals(1, int0);
  }
}
