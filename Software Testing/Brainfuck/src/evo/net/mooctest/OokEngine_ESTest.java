/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 30 17:39:23 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import net.mooctest.OokEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OokEngine_ESTest extends OokEngine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(682);
      assertNotNull(ookEngine0);
      
      ookEngine0.defaultTokenLength = (-1835);
      try { 
        ookEngine0.interpret("H8r,ED:+xL");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(603979776, (OutputStream) null);
      assertNotNull(ookEngine0);
      
      ookEngine0.charPointer = 3416;
      // Undeclared exception!
      ookEngine0.interpret("CnEzNrhq12}N!Scj");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      assertNotNull(byteArrayOutputStream0);
      
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine(5272, byteArrayOutputStream0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(byteArrayInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      assertEquals(0, byteArrayInputStream0.available());
      assertNotNull(pushbackInputStream0);
      assertEquals(0, byteArray0.length);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine((-1030), (OutputStream) null, pushbackInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(805306368);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedOutputStream0);
      
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine((-4131), pipedOutputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(1610612959);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.PREVIOUS;
      assertEquals("Ook? Ook.", ookEngine_Token0.getValue());
      
      String string0 = ookEngine_Token0.getValue();
      assertEquals("Ook? Ook.", ookEngine_Token0.getValue());
      assertNotNull(string0);
      assertEquals("Ook? Ook.", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null, 374);
      assertNotNull(bufferedInputStream0);
      
      OokEngine ookEngine0 = new OokEngine(374, pipedOutputStream0, bufferedInputStream0);
      assertNotNull(ookEngine0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(9);
      try { 
        ookEngine0.interpret("Ook! Ook?");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      OokEngine ookEngine0 = new OokEngine(0, byteArrayOutputStream0);
      ookEngine0.interpret(".LAD@$im^\"hD9tt");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }
}
