/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 01 10:19:33 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.Locale;
import java.util.Vector;
import net.mooctest.OokEngine;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OokEngine_ESTest extends OokEngine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(125);
      ookEngine0.dataPointer = 125;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      InputStreamReader inputStreamReader0 = new InputStreamReader(pipedInputStream0);
      ookEngine0.consoleReader = inputStreamReader0;
      ookEngine0.interpret(" ");
      OokEngine.Token.values();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(121);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.BRACKET_RIGHT;
      String string0 = "NEXT";
      ookEngine0.defaultTokenLength = 1265;
      ookEngine_Token0.value = "*";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "P+5VO>OxsC/SLyIx";
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)17;
      ookEngine0.data = byteArray0;
      ookEngine0.defaultTokenLength = 121;
      ookEngine_Token0.getValue();
      try { 
        ookEngine0.interpret("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}[*[){j#NqU.");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.spliterator();
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale.lookup(arrayList0, vector0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}[*[){j#NqU.");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}[*[){j#NqU.");
      mockPrintStream0.format((Locale) null, "", objectArray0);
      objectArray0[1] = (Object) "}[*[){j#NqU.";
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "}[*[){j#NqU.", objectArray0);
      OokEngine ookEngine0 = new OokEngine(3668, printStream0);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.NEXT;
      ookEngine_Token0.getValue();
      OokEngine.Token.values();
      ookEngine_Token0.getValue();
      SystemInUtil.addInputLine((String) null);
      ookEngine_Token0.value = "javaparse";
      OokEngine.Token.values();
      ookEngine0.interpret(" ");
      ookEngine_Token0.value = " ";
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token. 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(125);
      ookEngine0.lineCount = 34;
      ookEngine0.dataPointer = 125;
      ookEngine0.interpret(" ");
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("cK2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.cK2
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(121);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.BRACKET_RIGHT;
      String string0 = "NEXT";
      ookEngine0.defaultTokenLength = 1265;
      ookEngine_Token0.value = "*";
      String string1 = "P+5VO>OxsC/SLyIx";
      ookEngine0.defaultTokenLength = 121;
      ookEngine_Token0.getValue();
      ookEngine0.interpret("*");
      OokEngine.Token.values();
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}[*[){j#NqU.");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.spliterator();
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale.lookup(arrayList0, vector0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.format((Locale) null, "", objectArray0);
      vector0.add((Locale) null);
      objectArray0[1] = (Object) "}[*[){j#NqU.";
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "}[*[){j#NqU.", objectArray0);
      OokEngine ookEngine0 = new OokEngine(3668, printStream0);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.NEXT;
      ookEngine_Token0.getValue();
      OokEngine.Token.values();
      ookEngine_Token0.getValue();
      ookEngine_Token0.value = "}[*[){j#NqU.";
      OokEngine.Token.values();
      ookEngine0.interpret(" ");
      ookEngine_Token0.value = " ";
      String string0 = "com.github.javaparser.javadoc.Javadoc";
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token. 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(0);
      ookEngine0.defaultTokenLength = 0;
      ookEngine0.initate(0);
      InputStreamReader inputStreamReader0 = ookEngine0.consoleReader;
      ookEngine0.consoleReader = inputStreamReader0;
      ookEngine0.interpret("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'L';
      ookEngine0.interpret('L', charArray0);
      ookEngine0.outWriter = null;
      ookEngine0.dataPointer = (-2664);
      ookEngine0.interpret("e{VF?}t:c}");
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("uXm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.uXm
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.MINUS;
      ookEngine_Token0.getValue();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(" ");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(" ");
      OokEngine ookEngine0 = new OokEngine(23, mockFileOutputStream0, mockFileInputStream0);
      ookEngine0.initate(23);
      ookEngine_Token0.getValue();
      ookEngine_Token0.getValue();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OokEngine.Token.values();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("-f!1a", true);
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine(306654252, mockFileOutputStream0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      int int0 = (-1473);
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine((-1473));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      int int0 = (-128);
      String string0 = "net.mooctest.OokEngine";
      MockPrintStream mockPrintStream0 = new MockPrintStream("net.mooctest.OokEngine");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "net.mooctest.OokEngine");
      MockPrintStream mockPrintStream1 = new MockPrintStream(printStream0, true);
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine((-128), mockPrintStream1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      int int0 = (-262);
      OokEngine ookEngine0 = null;
      try {
        ookEngine0 = new OokEngine((-262), (OutputStream) null, (InputStream) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(1528);
      ookEngine0.defaultTokenLength = (-1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)17;
      byteArray0[2] = (byte)25;
      byteArray0[3] = (byte) (-10);
      byteArray0[4] = (byte)94;
      ookEngine0.data = byteArray0;
      try { 
        ookEngine0.interpret((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.OokEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ook! Ook.");
      OokEngine ookEngine0 = new OokEngine(125);
      byte[] byteArray0 = new byte[3];
      ookEngine0.dataPointer = (-2205);
      ookEngine0.data = byteArray0;
      ookEngine0.columnCount = 125;
      byteArray0[0] = (byte)79;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)22;
      ookEngine0.dataPointer = (int) (byte)22;
      ookEngine0.data = byteArray0;
      ookEngine0.interpret("`[HsI,J8|b{");
      ookEngine0.interpret(" ");
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("T;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.T;
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(125);
      byte[] byteArray0 = new byte[3];
      ookEngine0.dataPointer = 125;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ookEngine0.data = byteArray0;
      ookEngine0.columnCount = 125;
      ookEngine0.columnCount = 125;
      byteArray0[0] = (byte)79;
      byteArray0[2] = (byte)22;
      ookEngine0.interpret("`[HsI,J8|b{");
      ookEngine0.defaultTokenLength = (-1632679171);
      try { 
        ookEngine0.interpret(" ");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      int int0 = 2147483645;
      OokEngine ookEngine0 = new OokEngine(2147483645);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OokEngine.Token.values();
      OokEngine ookEngine0 = new OokEngine(0);
      ookEngine0.interpret("D!yghE^h%MH)34");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OokEngine ookEngine0 = new OokEngine(4261, pipedOutputStream0);
      ookEngine0.dataPointer = 0;
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("CharMatcher.invisible()");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.CharMatcher.invisible()
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(121);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.INPUT;
      String string0 = "NEXT";
      ookEngine0.defaultTokenLength = 1265;
      ookEngine_Token0.value = "NEXT";
      String string1 = "P+5VO>OxsC/SLyIx";
      ookEngine_Token0.value = "P+5VO>OxsC/SLyIx";
      ookEngine0.defaultTokenLength = 121;
      ookEngine_Token0.getValue();
      ookEngine0.interpret("P+5VO>OxsC/SLyIx");
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(125);
      ookEngine0.dataPointer = 125;
      ookEngine0.interpret(" ");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(4783);
      ookEngine0.interpret("eK");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(4365);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)125;
      byteArray0[2] = (byte) (-93);
      byteArray0[3] = (byte) (-80);
      byteArray0[4] = (byte) (-58);
      byteArray0[5] = (byte) (-30);
      ookEngine0.data = byteArray0;
      ookEngine0.interpret("COMMENT");
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("COMMENT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.COMMENT
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(121);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.BRACKET_RIGHT;
      String string0 = "NEXT";
      ookEngine0.defaultTokenLength = 1265;
      String string1 = "P+5VO>OxsC/SLyIx";
      ookEngine0.defaultTokenLength = 121;
      ookEngine_Token0.getValue();
      ookEngine0.interpret("*");
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf("*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(139);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.BRACKET_LEFT;
      String string0 = "NEXT";
      ookEngine0.defaultTokenLength = 1265;
      String string1 = "P+5VO>OxsC/SLyIx";
      ookEngine0.defaultTokenLength = 139;
      ookEngine_Token0.getValue();
      ookEngine0.interpret("com.github.javaparser.metamodel.ExplicitConstructorInvocationStmtMetaModel");
      OokEngine.Token.values();
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf(ookEngine_Token0.value);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token.Ook! Ook?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(115);
      ookEngine0.initate(9);
      ookEngine0.interpret("&");
      ookEngine0.dataPointer = 115;
      ookEngine0.dataPointer = 115;
      ookEngine0.interpret(" ");
      OokEngine.Token.values();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "}[*[){j#NqU.";
      MockPrintStream mockPrintStream0 = new MockPrintStream("}[*[){j#NqU.");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.spliterator();
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale.lookup(arrayList0, vector0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      String string1 = "";
      mockPrintStream0.printf((Locale) null, "}[*[){j#NqU.", objectArray0);
      OokEngine ookEngine0 = new OokEngine(3668);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.NEXT;
      ookEngine_Token0.getValue();
      OokEngine.Token.values();
      ookEngine_Token0.getValue();
      ookEngine_Token0.value = "javaparse";
      OokEngine.Token.values();
      ookEngine0.interpret(" ");
      ookEngine_Token0.value = " ";
      ookEngine0.interpret("com.github.javaparser.javadoc.Javadoc");
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token. 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("}[*[){j#NqU.");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      arrayList0.spliterator();
      Vector<Locale> vector0 = new Vector<Locale>();
      Locale.lookup(arrayList0, vector0);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) mockPrintStream0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("}[*[){j#NqU.");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "}[*[){j#NqU.");
      mockPrintStream0.format((Locale) null, "", objectArray0);
      objectArray0[1] = (Object) "}[*[){j#NqU.";
      PrintStream printStream0 = mockPrintStream0.printf((Locale) null, "}[*[){j#NqU.", objectArray0);
      OokEngine ookEngine0 = new OokEngine(3668, printStream0);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.NEXT;
      ookEngine_Token0.getValue();
      OokEngine.Token.values();
      ookEngine_Token0.getValue();
      SystemInUtil.addInputLine((String) null);
      ookEngine_Token0.value = "javaparse";
      OokEngine.Token.values();
      ookEngine0.interpret(" ");
      ookEngine_Token0.value = " ";
      String string0 = "com.github.javaparser.javadoc.Javadoc";
      // Undeclared exception!
      try { 
        OokEngine.Token.valueOf(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant net.mooctest.OokEngine.Token. 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OokEngine ookEngine0 = new OokEngine(121);
      OokEngine.Token ookEngine_Token0 = OokEngine.Token.BRACKET_RIGHT;
      ookEngine0.defaultTokenLength = 1265;
      ookEngine_Token0.value = "*";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte) (-35);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)4;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte) (-100);
      byteArray0[6] = (byte)40;
      byteArray0[7] = (byte)17;
      ookEngine0.data = byteArray0;
      ookEngine0.defaultTokenLength = 121;
      ookEngine_Token0.getValue();
      try { 
        ookEngine0.interpret("*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
