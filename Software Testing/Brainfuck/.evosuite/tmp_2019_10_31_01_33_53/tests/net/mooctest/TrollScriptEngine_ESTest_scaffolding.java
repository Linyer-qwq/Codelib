/**
 * Scaffolding file used to store all the setups needed to run 
 * tests automatically generated by EvoSuite
 * Wed Oct 30 17:37:00 GMT 2019
 */

package net.mooctest;

import org.evosuite.runtime.annotation.EvoSuiteClassExclude;
import org.junit.BeforeClass;
import org.junit.Before;
import org.junit.After;
import org.junit.AfterClass;
import org.evosuite.runtime.sandbox.Sandbox;
import org.evosuite.runtime.sandbox.Sandbox.SandboxMode;

@EvoSuiteClassExclude
public class TrollScriptEngine_ESTest_scaffolding {

  @org.junit.Rule 
  public org.evosuite.runtime.vnet.NonFunctionalRequirementRule nfr = new org.evosuite.runtime.vnet.NonFunctionalRequirementRule();

  private static final java.util.Properties defaultProperties = (java.util.Properties) java.lang.System.getProperties().clone(); 

  private org.evosuite.runtime.thread.ThreadStopper threadStopper =  new org.evosuite.runtime.thread.ThreadStopper (org.evosuite.runtime.thread.KillSwitchHandler.getInstance(), 3000);


  @BeforeClass 
  public static void initEvoSuiteFramework() { 
    org.evosuite.runtime.RuntimeSettings.className = "net.mooctest.TrollScriptEngine"; 
    org.evosuite.runtime.GuiSupport.initialize(); 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfThreads = 100; 
    org.evosuite.runtime.RuntimeSettings.maxNumberOfIterationsPerLoop = 10000; 
    org.evosuite.runtime.RuntimeSettings.mockSystemIn = true; 
    org.evosuite.runtime.RuntimeSettings.sandboxMode = org.evosuite.runtime.sandbox.Sandbox.SandboxMode.RECOMMENDED; 
    org.evosuite.runtime.sandbox.Sandbox.initializeSecurityManagerForSUT(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.init();
    setSystemProperties();
    initializeClasses();
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
  } 

  @AfterClass 
  public static void clearEvoSuiteFramework(){ 
    Sandbox.resetDefaultSecurityManager(); 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
  } 

  @Before 
  public void initTestCase(){ 
    threadStopper.storeCurrentThreads();
    threadStopper.startRecordingTime();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().initHandler(); 
    org.evosuite.runtime.sandbox.Sandbox.goingToExecuteSUTCode(); 
    setSystemProperties(); 
    org.evosuite.runtime.GuiSupport.setHeadless(); 
    org.evosuite.runtime.Runtime.getInstance().resetRuntime(); 
    org.evosuite.runtime.agent.InstrumentingAgent.activate(); 
  } 

  @After 
  public void doneWithTestCase(){ 
    threadStopper.killAndJoinClientThreads();
    org.evosuite.runtime.jvm.ShutdownHookHandler.getInstance().safeExecuteAddedHooks(); 
    org.evosuite.runtime.classhandling.JDKClassResetter.reset(); 
    resetClasses(); 
    org.evosuite.runtime.sandbox.Sandbox.doneWithExecutingSUTCode(); 
    org.evosuite.runtime.agent.InstrumentingAgent.deactivate(); 
    org.evosuite.runtime.GuiSupport.restoreHeadlessMode(); 
  } 

  public static void setSystemProperties() {
 
    java.lang.System.setProperties((java.util.Properties) defaultProperties.clone()); 
    java.lang.System.setProperty("file.encoding", "GBK"); 
    java.lang.System.setProperty("java.awt.headless", "true"); 
    java.lang.System.setProperty("java.io.tmpdir", "C:\\Users\\Wycer\\AppData\\Local\\Temp\\"); 
    java.lang.System.setProperty("user.country", "CN"); 
    java.lang.System.setProperty("user.dir", "D:\\Codelib\\Software Testing\\Brainfuck"); 
    java.lang.System.setProperty("user.home", "C:\\Users\\Wycer"); 
    java.lang.System.setProperty("user.language", "zh"); 
    java.lang.System.setProperty("user.name", "Wycer"); 
    java.lang.System.setProperty("user.timezone", "Asia/Shanghai"); 
  }

  private static void initializeClasses() {
    org.evosuite.runtime.classhandling.ClassStateSupport.initializeClasses(TrollScriptEngine_ESTest_scaffolding.class.getClassLoader() ,
      "net.mooctest.BrainfuckEngine",
      "org.eclipse.core.runtime.IPath",
      "org.eclipse.core.runtime.Path",
      "org.eclipse.core.runtime.Assert",
      "org.eclipse.core.runtime.AssertionFailedException",
      "net.mooctest.TrollScriptEngine",
      "net.mooctest.TrollScriptEngine$Token"
    );
  } 

  private static void resetClasses() {
    org.evosuite.runtime.classhandling.ClassResetter.getInstance().setClassLoader(TrollScriptEngine_ESTest_scaffolding.class.getClassLoader()); 

    org.evosuite.runtime.classhandling.ClassStateSupport.resetClasses(
      "net.mooctest.BrainfuckEngine",
      "net.mooctest.TrollScriptEngine",
      "net.mooctest.TrollScriptEngine$Token",
      "org.eclipse.core.runtime.PlatformObject",
      "org.eclipse.jdt.internal.core.JavaElement",
      "org.eclipse.jdt.internal.core.Openable",
      "org.eclipse.jdt.internal.core.JavaModel",
      "org.eclipse.jdt.internal.core.util.LRUCache",
      "org.eclipse.jdt.internal.core.index.Index",
      "org.eclipse.jdt.internal.core.search.indexing.ReadWriteMonitor",
      "org.eclipse.jdt.internal.core.index.MemoryIndex",
      "org.eclipse.jdt.internal.compiler.util.SimpleLookupTable",
      "org.eclipse.jdt.internal.core.util.SimpleWordSet",
      "org.eclipse.jdt.internal.compiler.util.SimpleSetOfCharArray",
      "org.eclipse.jdt.internal.core.index.DiskIndex",
      "org.eclipse.core.runtime.Assert",
      "org.eclipse.core.runtime.Path",
      "org.eclipse.jdt.internal.core.util.LRUCache$1",
      "org.eclipse.core.internal.utils.UniversalUniqueIdentifier",
      "org.eclipse.core.runtime.Plugin",
      "org.eclipse.core.resources.ResourcesPlugin",
      "org.eclipse.osgi.util.NLS$1",
      "org.eclipse.osgi.util.NLS",
      "org.eclipse.osgi.util.NLS$2",
      "org.eclipse.osgi.util.NLS$MessagesProperties",
      "org.eclipse.osgi.internal.util.SupplementDebug",
      "org.eclipse.core.internal.utils.Messages",
      "org.eclipse.core.internal.resources.FileState",
      "com.github.javaparser.ast.observer.AstObserver$ListChangeType",
      "org.eclipse.jdt.core.compiler.CharOperation",
      "org.eclipse.jdt.internal.core.JavaProject",
      "org.eclipse.jdt.internal.core.ExternalJavaProject",
      "org.eclipse.jdt.internal.core.Region",
      "org.eclipse.jdt.internal.core.Region$Node",
      "org.eclipse.core.runtime.NullProgressMonitor",
      "org.eclipse.jdt.internal.core.index.IndexLocation",
      "org.eclipse.jdt.internal.core.index.JarIndexLocation",
      "org.eclipse.jdt.core.compiler.CompilationProgress",
      "org.eclipse.jdt.internal.compiler.batch.Main",
      "org.eclipse.jdt.internal.compiler.util.HashtableOfInt",
      "org.eclipse.jdt.internal.compiler.batch.Main$Logger",
      "org.eclipse.jdt.internal.compiler.impl.CompilerOptions",
      "org.eclipse.jdt.internal.compiler.impl.IrritantSet",
      "org.eclipse.jdt.internal.compiler.Compiler",
      "org.eclipse.jdt.internal.compiler.util.Util",
      "org.eclipse.jdt.internal.compiler.batch.Main$ResourceBundleFactory",
      "org.eclipse.jdt.internal.core.index.FileIndexLocation",
      "org.eclipse.core.runtime.AssertionFailedException",
      "org.eclipse.jdt.internal.compiler.ast.ASTNode",
      "org.eclipse.jdt.internal.compiler.ast.Statement",
      "org.eclipse.jdt.internal.compiler.ast.Expression",
      "org.eclipse.jdt.internal.compiler.ast.TypeReference",
      "org.eclipse.jdt.internal.compiler.ast.QualifiedTypeReference",
      "org.eclipse.jdt.internal.compiler.ast.ArrayQualifiedTypeReference",
      "org.eclipse.jdt.internal.compiler.ast.ParameterizedQualifiedTypeReference",
      "org.eclipse.jdt.internal.core.ClasspathEntry",
      "org.eclipse.jdt.internal.compiler.ast.Reference",
      "org.eclipse.jdt.internal.compiler.ast.FieldReference",
      "org.eclipse.jdt.internal.compiler.ast.JavadocFieldReference"
    );
  }
}
