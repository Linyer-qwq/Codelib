/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 30 17:37:00 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.SequenceInputStream;
import java.util.Locale;
import net.mooctest.TrollScriptEngine;
import org.eclipse.core.runtime.Path;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TrollScriptEngine_ESTest extends TrollScriptEngine_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(1610612996, mockPrintStream0, pipedInputStream0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine.Token trollScriptEngine_Token1 = new TrollScriptEngine.Token();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(578);
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(578);
      trollScriptEngine0.interpret("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation");
      trollScriptEngine0.interpret("lll");
      trollScriptEngine0.interpret("totalLoadTime");
      trollScriptEngine0.interpret("oll");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      long long0 = 0L;
      System.setCurrentTimeMillis(0L);
      MockPrintStream mockPrintStream0 = new MockPrintStream("`");
      mockPrintStream0.print(2354.2131F);
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(1610613384, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      int int0 = 2147483645;
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(2147483645);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(603979776);
      trollScriptEngine0.initate(0);
      trollScriptEngine0.interpret("ooo");
      trollScriptEngine0.initate(603979776);
      trollScriptEngine0.isValidToken("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)93;
      byteArray0[1] = (byte)118;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      trollScriptEngine0.interpret("oll");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine.Token trollScriptEngine_Token1 = new TrollScriptEngine.Token();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream0);
      pipedOutputStream0.write(0);
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(578, pipedOutputStream0, pipedInputStream0);
      trollScriptEngine0.interpret("org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation");
      trollScriptEngine0.isValidToken("olo");
      trollScriptEngine0.interpret("lll");
      trollScriptEngine0.interpret("");
      trollScriptEngine0.interpret("oll");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(2795);
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      trollScriptEngine0.initate(2795);
      charArray0[1] = '#';
      charArray0[2] = 'k';
      charArray0[3] = 'k';
      charArray0[4] = 'k';
      charArray0[5] = 'k';
      charArray0[6] = 'k';
      charArray0[7] = 'k';
      trollScriptEngine0.interpret('k', charArray0);
      trollScriptEngine0.interpret("net.mooctest.TrollScriptEngine");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(1335);
      trollScriptEngine0.interpret("ool");
      trollScriptEngine0.interpret("ool");
      trollScriptEngine0.isValidToken("lll");
      Path path0 = null;
      try {
        path0 = new Path((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.eclipse.core.runtime.Path", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      int int0 = 1028;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      TrollScriptEngine trollScriptEngine0 = null;
      try {
        trollScriptEngine0 = new TrollScriptEngine(1028, mockPrintStream0, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("Enums.stringConverter(", false);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockFileOutputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      TrollScriptEngine trollScriptEngine0 = null;
      try {
        trollScriptEngine0 = new TrollScriptEngine((-3060), dataOutputStream0, pipedInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      int int0 = 0;
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(0);
      trollScriptEngine0.isValidToken("lol");
      trollScriptEngine0.isValidToken(">UQ(fe}7");
      trollScriptEngine0.interpret("");
      trollScriptEngine0.dataPointer = (-887);
      trollScriptEngine0.interpret("ll.");
      SequenceInputStream sequenceInputStream0 = null;
      try {
        sequenceInputStream0 = new SequenceInputStream((InputStream) null, (InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.SequenceInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(0);
      trollScriptEngine0.initate(0);
      trollScriptEngine0.charPointer = 67109282;
      trollScriptEngine0.defaultTokenLength = 3;
      trollScriptEngine0.interpret("P");
      trollScriptEngine0.isValidToken("P");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "LocalVarReferencePattern: ";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("LocalVarReferencePattern: ", true);
      TrollScriptEngine trollScriptEngine0 = null;
      try {
        trollScriptEngine0 = new TrollScriptEngine((-611), mockFileOutputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(2336);
      int int0 = 3487;
      trollScriptEngine0.columnCount = 3487;
      String string0 = null;
      // Undeclared exception!
      try { 
        trollScriptEngine0.isValidToken((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine.Token trollScriptEngine_Token1 = new TrollScriptEngine.Token();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(484, byteArrayOutputStream0, sequenceInputStream0);
      trollScriptEngine0.isValidToken("ooo");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      TrollScriptEngine trollScriptEngine0 = null;
      try {
        trollScriptEngine0 = new TrollScriptEngine((-75), (OutputStream) null, sequenceInputStream0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(13);
      trollScriptEngine0.initate(0);
      trollScriptEngine0.interpret("ooo");
      trollScriptEngine0.initate(13);
      trollScriptEngine0.isValidToken("");
      trollScriptEngine0.interpret("oll");
      trollScriptEngine0.isValidToken("loo");
      trollScriptEngine0.interpret("EYR*`c!X-");
      trollScriptEngine0.isValidToken("lll");
      trollScriptEngine0.isValidToken("llo");
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(1157);
      trollScriptEngine0.isValidToken(".L()5$J6.+tEKI1");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("|?81)Gx\"i:");
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) mockPrintStream0;
      mockPrintStream0.format((Locale) null, "|?81)Gx\"i:", objectArray0);
      objectArray0[1] = (Object) mockPrintStream0;
      mockPrintStream0.checkError();
      objectArray0[2] = (Object) mockPrintStream0;
      objectArray0[3] = (Object) mockPrintStream0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      PrintStream printStream0 = mockPrintStream0.format("|?81)Gx\"i:", objectArray0);
      mockPrintStream0.println((Object) null);
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(0, printStream0);
      trollScriptEngine0.interpret("?4ij5");
      trollScriptEngine0.outWriter = (OutputStream) mockPrintStream0;
      trollScriptEngine0.interpret("|?81)Gx\"i:");
      mockPrintStream0.print("");
      trollScriptEngine0.interpret("");
      trollScriptEngine0.interpret("|?81)Gx\"i:");
      try { 
        trollScriptEngine0.interpret((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.TrollScriptEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ll.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0, false);
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "ll.");
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(805, printStream0);
      trollScriptEngine0.interpret("ll.");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("O]:avx49iwx");
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(708, dataOutputStream0);
      trollScriptEngine0.interpret("O]:avx49iwx");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(2965);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("zH?O,KyB8*R?7|a7f$9", true);
      trollScriptEngine0.charPointer = (-262);
      trollScriptEngine0.outWriter = (OutputStream) mockFileOutputStream0;
      try { 
        trollScriptEngine0.interpret("zH?O,KyB8*R?7|a7f$9");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      int int0 = (-65537);
      TrollScriptEngine trollScriptEngine0 = null;
      try {
        trollScriptEngine0 = new TrollScriptEngine((-65537));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.BrainfuckEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(0);
      trollScriptEngine0.interpret("rV,~");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("llo");
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(2071, mockPrintStream0);
      trollScriptEngine0.isValidToken("llo");
      trollScriptEngine0.interpret("org.eclipse.jdt.internal.compiler.env.IBinaryTypeAnnotation");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(67109836);
      trollScriptEngine0.interpret("olo");
      trollScriptEngine0.interpret("com.google.common.collect.DiscreteDomain$BigIntegerDomain");
      trollScriptEngine0.interpret("lol");
      trollScriptEngine0.interpret("'BUz>GNllR");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(2795);
      trollScriptEngine0.interpret("net.mooctest.TrollScriptEngine");
      trollScriptEngine0.interpret("(D/[lKPyuv&Cgrb#&%<");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(1335);
      trollScriptEngine0.interpret("ool");
      FileSystemHandling.shouldAllThrowIOExceptions();
      trollScriptEngine0.interpret("ll.");
      trollScriptEngine0.interpret("lll");
      System.setCurrentTimeMillis(1335);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TrollScriptEngine.Token trollScriptEngine_Token0 = new TrollScriptEngine.Token();
      TrollScriptEngine trollScriptEngine0 = new TrollScriptEngine(282);
      trollScriptEngine0.initate(282);
      trollScriptEngine0.interpret("ooo");
      trollScriptEngine0.interpret("loo");
      trollScriptEngine0.interpret("A47RR=csTrn_AB4I]");
  }
}
