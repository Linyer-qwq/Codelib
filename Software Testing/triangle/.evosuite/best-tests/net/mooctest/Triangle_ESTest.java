/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 09 10:29:00 GMT 2018
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.Triangle;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Triangle_ESTest extends Triangle_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triangle triangle0 = new Triangle((-1401L), (-1401L), 0L);
      long[] longArray0 = triangle0.getBorders();
      assertArrayEquals(new long[] {(-1401L), (-1401L), 0L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Triangle triangle0 = new Triangle((-3036L), (-3036L), 9223372036854775807L);
      triangle0.lborderA = 9223372036854775807L;
      long[] longArray0 = triangle0.getBorders();
      assertArrayEquals(new long[] {9223372036854775807L, (-3036L), 9223372036854775807L}, longArray0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle triangle0 = new Triangle(1746L, 1746L, 1746L);
      triangle0.lborderA = 2169L;
      triangle0.lborderC = 0L;
      triangle0.lborderC = 3274L;
      String string0 = triangle0.getType(triangle0);
      assertEquals("Scalene", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangle triangle0 = new Triangle(1273L, 1273L, 0L);
      Triangle triangle1 = new Triangle(1430L, 0L, 1273L);
      triangle1.lborderB = 1749L;
      String string0 = triangle0.getType(triangle1);
      assertEquals("Scalene", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triangle triangle0 = new Triangle(3112L, 2143L, 245L);
      triangle0.lborderA = 3112L;
      triangle0.lborderA = 2143L;
      String string0 = triangle0.getType(triangle0);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle triangle0 = new Triangle((-3036L), (-3036L), 9223372036854775807L);
      Triangle triangle1 = new Triangle(1479L, 9223372036854775807L, 9223372036854775806L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, (-1L));
      Triangle triangle1 = new Triangle(9223372036854775807L, 9223372036854775807L, (-1L));
      triangle1.lborderC = 1L;
      triangle1.lborderC = 9223372036854775807L;
      String string0 = triangle0.getType(triangle1);
      assertEquals("Regular", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, (-1L));
      Triangle triangle1 = new Triangle(9223372036854775807L, 9223372036854775807L, (-1L));
      triangle1.lborderC = 1L;
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775805L, 9223372036854775805L, 9223372036854775805L);
      Triangle triangle1 = new Triangle(9223372036854772323L, 9223372036854775805L, 3482L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, 1L);
      Triangle triangle1 = new Triangle(1L, 1L, (-620L));
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 1633L);
      Triangle triangle1 = new Triangle(0L, 1633L, 9223372036854775807L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangle triangle0 = new Triangle((-4244L), (-4244L), (-4244L));
      long long0 = triangle0.diffOfBorders((-4244L), (-4244L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, (-380L));
      long long0 = triangle0.diffOfBorders(9223372036854775807L, (-1L));
      assertEquals((-9223372036854775808L), long0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triangle triangle0 = new Triangle(2592L, 2592L, 2592L);
      // Undeclared exception!
      try { 
        triangle0.isTriangle((Triangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Triangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triangle triangle0 = new Triangle((-4231L), (-4231L), (-4231L));
      // Undeclared exception!
      try { 
        triangle0.getType((Triangle) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Triangle", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, 1L);
      long long0 = triangle0.diffOfBorders(0L, (-620L));
      assertEquals(620L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, (-1L));
      Triangle triangle1 = new Triangle(9223372036854775807L, 9223372036854775807L, (-1L));
      triangle1.lborderC = 1L;
      triangle1.lborderC = 9223372036854775807L;
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 1633L);
      Triangle triangle1 = new Triangle(0L, 1633L, 9223372036854775807L);
      triangle1.lborderA = 1L;
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Triangle triangle0 = new Triangle(1L, 1L, (-1L));
      triangle0.lborderA = (-1L);
      boolean boolean0 = triangle0.isTriangle(triangle0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Triangle triangle0 = new Triangle(2592L, 2592L, 2592L);
      Triangle triangle1 = new Triangle(2592L, 2592L, 2592L);
      triangle1.lborderB = 0L;
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Triangle triangle0 = new Triangle(1746L, 1746L, 1746L);
      triangle0.lborderB = 706L;
      String string0 = triangle0.getType(triangle0);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Triangle triangle0 = new Triangle(828L, 828L, 828L);
      triangle0.lborderC = 1572L;
      String string0 = triangle0.getType(triangle0);
      assertEquals("Isosceles", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 1700L, 1700L);
      Triangle triangle1 = new Triangle(5207L, 9223372036854770786L, 9223372036854775807L);
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Triangle triangle0 = new Triangle(1746L, 1746L, 1746L);
      Triangle triangle1 = new Triangle(1746L, 2169L, 0L);
      boolean boolean0 = triangle0.isTriangle(triangle1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 9223372036854775807L, 9223372036854775807L);
      Triangle triangle1 = new Triangle(9223372036854775807L, (-3129L), 9223372036854775807L);
      String string0 = triangle0.getType(triangle1);
      assertEquals("Illegal", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Triangle triangle0 = new Triangle(9223372036854775807L, 1700L, 1700L);
      boolean boolean0 = triangle0.isTriangle(triangle0);
      assertFalse(boolean0);
  }
}
