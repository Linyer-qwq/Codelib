/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 19 13:11:49 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javaparser.JavaToken;
import com.github.javaparser.Position;
import com.github.javaparser.Range;
import com.github.javaparser.TokenRange;
import com.github.javaparser.ast.ArrayCreationLevel;
import com.github.javaparser.ast.Modifier;
import com.github.javaparser.ast.NodeList;
import com.github.javaparser.ast.PackageDeclaration;
import com.github.javaparser.ast.body.AnnotationDeclaration;
import com.github.javaparser.ast.body.ClassOrInterfaceDeclaration;
import com.github.javaparser.ast.body.ConstructorDeclaration;
import com.github.javaparser.ast.body.Parameter;
import com.github.javaparser.ast.body.ReceiverParameter;
import com.github.javaparser.ast.expr.AnnotationExpr;
import com.github.javaparser.ast.expr.ArrayCreationExpr;
import com.github.javaparser.ast.expr.BinaryExpr;
import com.github.javaparser.ast.expr.LongLiteralExpr;
import com.github.javaparser.ast.expr.Name;
import com.github.javaparser.ast.expr.SimpleName;
import com.github.javaparser.ast.expr.SuperExpr;
import com.github.javaparser.ast.stmt.AssertStmt;
import com.github.javaparser.ast.stmt.BlockStmt;
import com.github.javaparser.ast.stmt.DoStmt;
import com.github.javaparser.ast.stmt.IfStmt;
import com.github.javaparser.ast.stmt.LabeledStmt;
import com.github.javaparser.ast.stmt.Statement;
import com.github.javaparser.ast.stmt.SwitchEntryStmt;
import com.github.javaparser.ast.stmt.SwitchStmt;
import com.github.javaparser.ast.stmt.SynchronizedStmt;
import com.github.javaparser.ast.stmt.UnparsableStmt;
import com.github.javaparser.ast.type.ArrayType;
import com.github.javaparser.ast.type.ClassOrInterfaceType;
import com.github.javaparser.ast.type.IntersectionType;
import com.github.javaparser.ast.type.PrimitiveType;
import com.github.javaparser.ast.type.ReferenceType;
import com.github.javaparser.ast.type.Type;
import com.github.javaparser.ast.type.TypeParameter;
import com.github.javaparser.ast.type.VoidType;
import java.lang.annotation.Annotation;
import java.lang.reflect.Array;
import java.util.AbstractMap;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import net.mooctest.PauselessHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import sun.misc.Unsafe;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PauselessHashMap_ESTest extends PauselessHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, String> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, String>(2554, 2554);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 1, false);
      pauselessHashMap_Resizer0.startTimeNsec = 1L;
      PauselessHashMap<ConstructorDeclaration, String> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap1.newElementArray(1100);
      PauselessHashMap<LabeledStmt, Integer> pauselessHashMap2 = new PauselessHashMap<LabeledStmt, Integer>(1, 1100);
      PauselessHashMap<LabeledStmt, Integer> pauselessHashMap3 = new PauselessHashMap<LabeledStmt, Integer>(pauselessHashMap2);
      pauselessHashMap2.indicatedObservedResizingIntoTable = true;
      pauselessHashMap3.kickoffBackgroundResize(0);
      pauselessHashMap3.putAll(pauselessHashMap2);
      PauselessHashMap.InternalMapEntry<Optional<BinaryExpr.Operator>, Integer> pauselessHashMap_InternalMapEntry0 = new PauselessHashMap.InternalMapEntry<Optional<BinaryExpr.Operator>, Integer>((Optional<BinaryExpr.Operator>) null);
      pauselessHashMap_InternalMapEntry0.getValue();
      PauselessHashMap<Delayed, Object> pauselessHashMap4 = new PauselessHashMap<Delayed, Object>();
      pauselessHashMap4.clone();
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap5 = new PauselessHashMap<LabeledStmt, BinaryExpr.Operator>(2554, 1);
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap6 = new PauselessHashMap<LabeledStmt, BinaryExpr.Operator>(pauselessHashMap5);
      pauselessHashMap6.kickoffBackgroundResize(21);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<LabeledStmt, BinaryExpr.Operator>();
      int int0 = 1073741824;
      // Undeclared exception!
      try { 
        pauselessHashMap0.doResize(1073741824);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<Annotation, BinaryExpr.Operator>, AbstractMap.SimpleEntry<Object, LabeledStmt>> pauselessHashMap0 = new PauselessHashMap<AbstractMap.SimpleImmutableEntry<Annotation, BinaryExpr.Operator>, AbstractMap.SimpleEntry<Object, LabeledStmt>>();
      pauselessHashMap0.elementCount = (-765);
      pauselessHashMap0.findNullKeyEntryInChain((PauselessHashMap.Entry<AbstractMap.SimpleImmutableEntry<Annotation, BinaryExpr.Operator>, AbstractMap.SimpleEntry<Object, LabeledStmt>>) null);
      PauselessHashMap<Object, Object> pauselessHashMap1 = new PauselessHashMap<Object, Object>();
      pauselessHashMap1.rehash((-1394));
      PauselessHashMap<Integer, BinaryExpr.Operator> pauselessHashMap2 = new PauselessHashMap<Integer, BinaryExpr.Operator>();
      Integer integer0 = new Integer((-765));
      // Undeclared exception!
      try { 
        pauselessHashMap2.createHashedEntry(integer0, (-765), 535);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -765
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      PauselessHashMap.Entry<Object, BinaryExpr.Operator> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<Object, BinaryExpr.Operator>((Object) null, 51);
      pauselessHashMap_Entry0.isValid = false;
      Map.Entry.comparingByKey();
      pauselessHashMap_Entry0.setValid();
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.OR;
      pauselessHashMap_Entry0.setValue(binaryExpr_Operator0);
      HashMap<BinaryExpr.Operator, Delayed> hashMap0 = new HashMap<BinaryExpr.Operator, Delayed>();
      PauselessHashMap<BinaryExpr.Operator, Delayed> pauselessHashMap0 = new PauselessHashMap<BinaryExpr.Operator, Delayed>(hashMap0);
      ThreadPoolExecutor.AbortPolicy threadPoolExecutor_AbortPolicy0 = new ThreadPoolExecutor.AbortPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(51, threadPoolExecutor_AbortPolicy0);
      scheduledThreadPoolExecutor0.getThreadFactory();
      Callable<LabeledStmt> callable0 = (Callable<LabeledStmt>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Delayed>) comparator0);
      ScheduledFuture<LabeledStmt> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 51, timeUnit0);
      BiFunction<Object, Delayed, Delayed> biFunction0 = (BiFunction<Object, Delayed, Delayed>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      hashMap0.put((BinaryExpr.Operator) null, scheduledFuture0);
      BiFunction<BinaryExpr.Operator, Object, Delayed> biFunction1 = (BiFunction<BinaryExpr.Operator, Object, Delayed>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any(com.github.javaparser.ast.expr.BinaryExpr.Operator.class) , any());
      hashMap0.compute((BinaryExpr.Operator) null, biFunction1);
      int int0 = 2333;
      // Undeclared exception!
      try { 
        pauselessHashMap0.findNonNullKeyEntry(binaryExpr_Operator0, 2333, 108);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2333
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      PauselessHashMap.InternalMapEntry<String, Object> pauselessHashMap_InternalMapEntry0 = new PauselessHashMap.InternalMapEntry<String, Object>("");
      pauselessHashMap_InternalMapEntry0.clone();
      PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleEntry<Object, Object>, Annotation> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleEntry<Object, Object>, Annotation>((PauselessHashMap<AbstractMap.SimpleEntry<Object, Object>, Annotation>) null);
      pauselessHashMap_HashMapEntrySet0.hashMap();
      int int0 = 3;
      PauselessHashMap<Delayed, Annotation> pauselessHashMap0 = new PauselessHashMap<Delayed, Annotation>(3);
      pauselessHashMap0.backgroundResizeComplete = false;
      PauselessHashMap.HashMapEntrySet<Delayed, Annotation> pauselessHashMap_HashMapEntrySet1 = new PauselessHashMap.HashMapEntrySet<Delayed, Annotation>(pauselessHashMap0);
      pauselessHashMap_HashMapEntrySet1.contains(pauselessHashMap_InternalMapEntry0);
      PauselessHashMap<Integer, Delayed> pauselessHashMap1 = new PauselessHashMap<Integer, Delayed>(3, 3);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(119, threadPoolExecutor_DiscardOldestPolicy0);
      Callable<LabeledStmt> callable0 = (Callable<LabeledStmt>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.DAYS;
      ScheduledFuture<LabeledStmt> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) 119, timeUnit0);
      pauselessHashMap1.getOrDefault(pauselessHashMap_InternalMapEntry0, scheduledFuture0);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap1.new Resizer(pauselessHashMap1, (-126), false);
      PauselessHashMap<Integer, LabeledStmt> pauselessHashMap2 = null;
      try {
        pauselessHashMap2 = new PauselessHashMap<Integer, LabeledStmt>(119, (-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.REMAINDER;
      PauselessHashMap.Entry<AbstractMap.SimpleImmutableEntry<String, BinaryExpr.Operator>, BinaryExpr.Operator> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<AbstractMap.SimpleImmutableEntry<String, BinaryExpr.Operator>, BinaryExpr.Operator>((AbstractMap.SimpleImmutableEntry<String, BinaryExpr.Operator>) null, binaryExpr_Operator0);
      pauselessHashMap_Entry0.toString();
      pauselessHashMap_Entry0.setInvalid();
      pauselessHashMap_Entry0.isValid();
      PauselessHashMap<BinaryExpr.Operator, String> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<BinaryExpr.Operator, String>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, Object> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, Object>(90);
      PauselessHashMap.Entry<Object, String> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<Object, String>(pauselessHashMap0, 90);
      pauselessHashMap_Entry0.toString();
      pauselessHashMap0.findNonNullKeyEntry(pauselessHashMap_Entry0, 90, 90);
      PauselessHashMap<Integer, String> pauselessHashMap1 = new PauselessHashMap<Integer, String>(90);
      int int0 = (-279);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap1.new Resizer(pauselessHashMap1, (-279), false);
      pauselessHashMap_Resizer0.startTimeNsec = 0L;
      PauselessHashMap<Integer, String> pauselessHashMap2 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap2.findNullKeyEntryInElementData();
      PauselessHashMap<String, ConstructorDeclaration> pauselessHashMap3 = new PauselessHashMap<String, ConstructorDeclaration>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap3.new Resizer(pauselessHashMap3, 90, false);
      PauselessHashMap<String, ConstructorDeclaration> pauselessHashMap4 = pauselessHashMap_Resizer1.associatedMap;
      PauselessHashMap<String, ConstructorDeclaration> pauselessHashMap5 = new PauselessHashMap<String, ConstructorDeclaration>(pauselessHashMap4);
      pauselessHashMap5.clone();
      PauselessHashMap<Integer, Object> pauselessHashMap6 = null;
      try {
        pauselessHashMap6 = new PauselessHashMap<Integer, Object>(90, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      PauselessHashMap<String, AbstractMap.SimpleEntry<BinaryExpr.Operator, Integer>> pauselessHashMap0 = new PauselessHashMap<String, AbstractMap.SimpleEntry<BinaryExpr.Operator, Integer>>();
      AtomicBoolean atomicBoolean0 = new AtomicBoolean();
      pauselessHashMap0.volatileUpdateIndicator = atomicBoolean0;
      int int0 = 119;
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 119, false);
      PauselessHashMap<String, AbstractMap.SimpleEntry<BinaryExpr.Operator, Integer>> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap_Resizer0.startTimeNsec = (-132L);
      pauselessHashMap1.backgroundResizeComplete = true;
      pauselessHashMap1.backgroundResizeComplete = true;
      String string0 = "";
      int int1 = 0;
      // Undeclared exception!
      try { 
        pauselessHashMap1.createHashedEntry("", 119, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      PauselessHashMap<Delayed, Integer> pauselessHashMap0 = new PauselessHashMap<Delayed, Integer>(0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      pauselessHashMap0.forEach(biConsumer0);
      // Undeclared exception!
      try { 
        pauselessHashMap0.findNonNullKeyEntryInElementData((Object) null, 8287, 8287);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8287
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PauselessHashMap.EntryArrayHelper pauselessHashMap_EntryArrayHelper0 = new PauselessHashMap.EntryArrayHelper();
      int int0 = 0;
      PauselessHashMap<String, Integer> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<String, Integer>(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, Integer> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, Integer>();
      int int0 = 0;
      boolean boolean0 = false;
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 0, false);
      PauselessHashMap<ConstructorDeclaration, Integer> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap1.putAll(pauselessHashMap0);
      PauselessHashMap<ConstructorDeclaration, Integer> pauselessHashMap2 = new PauselessHashMap<ConstructorDeclaration, Integer>(pauselessHashMap1);
      pauselessHashMap2.clone();
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>, LabeledStmt> pauselessHashMap3 = new PauselessHashMap<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>, LabeledStmt>(0);
      Object object0 = null;
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.UNSIGNED_RIGHT_SHIFT;
      AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>(binaryExpr_Operator0, (String) null);
      PauselessHashMap.Entry<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>, LabeledStmt> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>, LabeledStmt>(abstractMap_SimpleImmutableEntry0, 0);
      // Undeclared exception!
      try { 
        pauselessHashMap3.findNonNullKeyEntryInChain((Object) null, pauselessHashMap_Entry0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      AbstractMap.SimpleEntry<String, Annotation> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Annotation>("", annotation0);
      Annotation annotation1 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      PauselessHashMap.InternalMapEntry<AbstractMap.SimpleEntry<String, Annotation>, Annotation> pauselessHashMap_InternalMapEntry0 = new PauselessHashMap.InternalMapEntry<AbstractMap.SimpleEntry<String, Annotation>, Annotation>(abstractMap_SimpleEntry0, annotation1);
      PauselessHashMap<Delayed, Object> pauselessHashMap0 = new PauselessHashMap<Delayed, Object>();
      pauselessHashMap0.rehash();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, Integer>, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, Integer>, BinaryExpr.Operator>();
      pauselessHashMap0.pendingResize = true;
      int int0 = 1825;
      PauselessHashMap<String, String> pauselessHashMap1 = new PauselessHashMap<String, String>(1825);
      pauselessHashMap1.isEmpty();
      PauselessHashMap<ConstructorDeclaration, Annotation> pauselessHashMap2 = new PauselessHashMap<ConstructorDeclaration, Annotation>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      pauselessHashMap2.forEach(biConsumer0);
      PauselessHashMap<ConstructorDeclaration, Annotation> pauselessHashMap3 = new PauselessHashMap<ConstructorDeclaration, Annotation>(1825);
      pauselessHashMap2.putAll(pauselessHashMap3);
      PauselessHashMap<BinaryExpr.Operator, Delayed> pauselessHashMap4 = new PauselessHashMap<BinaryExpr.Operator, Delayed>(1825, 1825);
      pauselessHashMap0.needToKickOffAnotherBackgroundResize = true;
      pauselessHashMap4.rehash(1825);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap4.new Resizer(pauselessHashMap4, 1825, true);
      PauselessHashMap<BinaryExpr.Operator, Delayed> pauselessHashMap5 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap_Resizer0.run();
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.UNSIGNED_RIGHT_SHIFT;
      pauselessHashMap_Resizer0.run();
      // Undeclared exception!
      try { 
        pauselessHashMap_Resizer0.insertUniqueEquivalentAtHeadOfBucket((PauselessHashMap.Entry<BinaryExpr.Operator, Delayed>) null, 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap$Resizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PauselessHashMap<Integer, String> pauselessHashMap0 = new PauselessHashMap<Integer, String>();
      int int0 = 0;
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 0, false);
      pauselessHashMap_Resizer0.startTimeNsec = (-3208L);
      pauselessHashMap_Resizer0.run();
      PauselessHashMap<Integer, String> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      PauselessHashMap<Integer, Object> pauselessHashMap2 = new PauselessHashMap<Integer, Object>(pauselessHashMap1);
      pauselessHashMap2.isEmpty();
      PauselessHashMap<ConstructorDeclaration, PauselessHashMap.Entry<Integer, Object>> pauselessHashMap3 = new PauselessHashMap<ConstructorDeclaration, PauselessHashMap.Entry<Integer, Object>>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap3.new Resizer(pauselessHashMap3, 0, true);
      PauselessHashMap<ConstructorDeclaration, PauselessHashMap.Entry<Integer, Object>> pauselessHashMap4 = pauselessHashMap_Resizer1.associatedMap;
      pauselessHashMap4.forceFinishResizing();
      PauselessHashMap<String, String> pauselessHashMap5 = new PauselessHashMap<String, String>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer2 = pauselessHashMap5.new Resizer(pauselessHashMap5, (-1998), false);
      PauselessHashMap<String, String> pauselessHashMap6 = pauselessHashMap_Resizer2.associatedMap;
      pauselessHashMap6.rehash();
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap7 = new PauselessHashMap<LabeledStmt, BinaryExpr.Operator>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer3 = pauselessHashMap7.new Resizer(pauselessHashMap7, (-1998), false);
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap8 = pauselessHashMap_Resizer3.associatedMap;
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap9 = new PauselessHashMap<LabeledStmt, BinaryExpr.Operator>(pauselessHashMap8);
      pauselessHashMap8.backgroundResizeComplete = false;
      PauselessHashMap<Object, BinaryExpr.Operator> pauselessHashMap10 = new PauselessHashMap<Object, BinaryExpr.Operator>(pauselessHashMap9);
      pauselessHashMap10.containsKey(pauselessHashMap6);
      PauselessHashMap<Object, Object> pauselessHashMap11 = null;
      try {
        pauselessHashMap11 = new PauselessHashMap<Object, Object>((-1998), (-1998));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<LabeledStmt, BinaryExpr.Operator>(1085);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 1085, false);
      PauselessHashMap<LabeledStmt, BinaryExpr.Operator> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      PauselessHashMap.HashMapEntrySet<LabeledStmt, BinaryExpr.Operator> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<LabeledStmt, BinaryExpr.Operator>(pauselessHashMap1);
      LabeledStmt[] labeledStmtArray0 = new LabeledStmt[4];
      DoStmt doStmt0 = new DoStmt();
      LabeledStmt labeledStmt0 = new LabeledStmt("DG( pR!M`>q", doStmt0);
      labeledStmtArray0[0] = labeledStmt0;
      SimpleName simpleName0 = new SimpleName("DG( pR!M`>q");
      SimpleName simpleName1 = simpleName0.clone();
      LabeledStmt labeledStmt1 = labeledStmt0.setLabel(simpleName1);
      labeledStmtArray0[1] = labeledStmt1;
      LabeledStmt labeledStmt2 = labeledStmt0.clone();
      labeledStmtArray0[2] = labeledStmt2;
      LabeledStmt labeledStmt3 = labeledStmt0.asLabeledStmt();
      labeledStmtArray0[3] = labeledStmt3;
      NodeList<LabeledStmt> nodeList0 = NodeList.nodeList(labeledStmtArray0);
      pauselessHashMap_HashMapEntrySet0.containsAll(nodeList0);
      pauselessHashMap_HashMapEntrySet0.size();
      PauselessHashMap<Delayed, String> pauselessHashMap2 = new PauselessHashMap<Delayed, String>(31, 2154.35F);
      PauselessHashMap<Delayed, String> pauselessHashMap3 = new PauselessHashMap<Delayed, String>(pauselessHashMap2);
      pauselessHashMap2.kickoffBackgroundResize(1085);
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap3.new Resizer(pauselessHashMap3, 0, false);
      PauselessHashMap<Delayed, String> pauselessHashMap4 = pauselessHashMap_Resizer1.associatedMap;
      pauselessHashMap4.size();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PauselessHashMap<LabeledStmt, Annotation> pauselessHashMap0 = new PauselessHashMap<LabeledStmt, Annotation>();
      int int0 = (-495);
      boolean boolean0 = true;
      pauselessHashMap0.indicatedObservedResizingIntoTable = true;
      LabeledStmt labeledStmt0 = new LabeledStmt();
      Consumer<DoStmt> consumer0 = (Consumer<DoStmt>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      labeledStmt0.ifDoStmt(consumer0);
      int int1 = 0;
      PauselessHashMap.Entry<LabeledStmt, Annotation> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<LabeledStmt, Annotation>(labeledStmt0, 0);
      Annotation annotation0 = mock(Annotation.class, new ViolatedAssumptionAnswer());
      PauselessHashMap.Entry<LabeledStmt, Annotation> pauselessHashMap_Entry1 = new PauselessHashMap.Entry<LabeledStmt, Annotation>(labeledStmt0, annotation0);
      PauselessHashMap.Entry<LabeledStmt, Annotation> pauselessHashMap_Entry2 = pauselessHashMap_Entry1.next;
      pauselessHashMap_Entry0.key = labeledStmt0;
      pauselessHashMap_Entry0.next = null;
      PauselessHashMap.Entry<LabeledStmt, Annotation> pauselessHashMap_Entry3 = pauselessHashMap_Entry0.next;
      // Undeclared exception!
      try { 
        pauselessHashMap0.removeEntry((PauselessHashMap.Entry<LabeledStmt, Annotation>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      int int0 = 0;
      PauselessHashMap<Delayed, PauselessHashMap.Entry<Object, Object>> pauselessHashMap0 = new PauselessHashMap<Delayed, PauselessHashMap.Entry<Object, Object>>(0);
      pauselessHashMap0.needToKickOffAnotherBackgroundResize = true;
      pauselessHashMap0.findNullKeyEntry();
      int int1 = 4;
      PauselessHashMap<Optional<Integer>, AbstractMap.SimpleImmutableEntry<ConstructorDeclaration, Integer>> pauselessHashMap1 = new PauselessHashMap<Optional<Integer>, AbstractMap.SimpleImmutableEntry<ConstructorDeclaration, Integer>>(4, 1126.1621F);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        pauselessHashMap1.removeEntry((PauselessHashMap.Entry<Optional<Integer>, AbstractMap.SimpleImmutableEntry<ConstructorDeclaration, Integer>>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PauselessHashMap.Entry<LabeledStmt, ConstructorDeclaration> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<LabeledStmt, ConstructorDeclaration>((LabeledStmt) null, 0);
      pauselessHashMap_Entry0.clone();
      pauselessHashMap_Entry0.isValid = true;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Map.Entry.comparingByKey((Comparator<? super Annotation>) comparator0);
      PauselessHashMap.Entry<LabeledStmt, ConstructorDeclaration> pauselessHashMap_Entry1 = pauselessHashMap_Entry0.next;
      PauselessHashMap.Entry<Delayed, PauselessHashMap.Entry<LabeledStmt, ConstructorDeclaration>> pauselessHashMap_Entry2 = new PauselessHashMap.Entry<Delayed, PauselessHashMap.Entry<LabeledStmt, ConstructorDeclaration>>((Delayed) null, (PauselessHashMap.Entry<LabeledStmt, ConstructorDeclaration>) null);
      PauselessHashMap<String, ConstructorDeclaration> pauselessHashMap0 = new PauselessHashMap<String, ConstructorDeclaration>();
      PauselessHashMap<String, ConstructorDeclaration> pauselessHashMap1 = new PauselessHashMap<String, ConstructorDeclaration>(pauselessHashMap0);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap1.new Resizer(pauselessHashMap1, 0, true);
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<String, ConstructorDeclaration>, AbstractMap.SimpleImmutableEntry<Object, Delayed>> pauselessHashMap2 = new PauselessHashMap<AbstractMap.SimpleImmutableEntry<String, ConstructorDeclaration>, AbstractMap.SimpleImmutableEntry<Object, Delayed>>();
      pauselessHashMap2.clone();
      HashMap<BinaryExpr.Operator, Integer> hashMap0 = new HashMap<BinaryExpr.Operator, Integer>();
      PauselessHashMap<BinaryExpr.Operator, Integer> pauselessHashMap3 = new PauselessHashMap<BinaryExpr.Operator, Integer>(hashMap0);
      PauselessHashMap<Integer, LabeledStmt> pauselessHashMap4 = new PauselessHashMap<Integer, LabeledStmt>(0);
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap4.new Resizer(pauselessHashMap4, 0, true);
      PauselessHashMap<Integer, LabeledStmt> pauselessHashMap5 = pauselessHashMap_Resizer1.associatedMap;
      pauselessHashMap5.findNonNullKeyEntryInElementData(pauselessHashMap2, 0, 1111);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      PauselessHashMap<Integer, Integer> pauselessHashMap0 = new PauselessHashMap<Integer, Integer>(hashMap0);
      PauselessHashMap<Object, Integer> pauselessHashMap1 = new PauselessHashMap<Object, Integer>(324);
      pauselessHashMap1.findNullKeyEntry();
      int int0 = (-1846);
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object> pauselessHashMap2 = null;
      try {
        pauselessHashMap2 = new PauselessHashMap<AbstractMap.SimpleImmutableEntry<String, Object>, Object>((-1846), (-1.0F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      PauselessHashMap<BinaryExpr.Operator, String> pauselessHashMap0 = new PauselessHashMap<BinaryExpr.Operator, String>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, (-1094), false);
      PauselessHashMap<BinaryExpr.Operator, String> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      PauselessHashMap<BinaryExpr.Operator, String> pauselessHashMap2 = new PauselessHashMap<BinaryExpr.Operator, String>(pauselessHashMap1);
      pauselessHashMap2.getEntry(pauselessHashMap1);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      PauselessHashMap<AbstractMap.SimpleEntry<Delayed, Integer>, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<AbstractMap.SimpleEntry<Delayed, Integer>, BinaryExpr.Operator>();
      PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleEntry<Delayed, Integer>, BinaryExpr.Operator> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleEntry<Delayed, Integer>, BinaryExpr.Operator>(pauselessHashMap0);
      pauselessHashMap_HashMapEntrySet0.clear();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      int int0 = 0;
      PauselessHashMap<String, AbstractMap.SimpleEntry<String, Object>> pauselessHashMap0 = new PauselessHashMap<String, AbstractMap.SimpleEntry<String, Object>>(0);
      pauselessHashMap0.clear();
      PauselessHashMap<Delayed, Object> pauselessHashMap1 = new PauselessHashMap<Delayed, Object>(0);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap1.new Resizer(pauselessHashMap1, 0, false);
      pauselessHashMap_Resizer0.run();
      String string0 = null;
      TokenRange tokenRange0 = TokenRange.INVALID;
      ArrayCreationExpr arrayCreationExpr0 = new ArrayCreationExpr();
      SwitchEntryStmt[] switchEntryStmtArray0 = new SwitchEntryStmt[9];
      ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel();
      Class<Statement> class0 = Statement.class;
      List<Statement> list0 = arrayCreationLevel0.getChildNodesByType(class0);
      NodeList<Statement> nodeList0 = NodeList.nodeList((Collection<Statement>) list0);
      SwitchEntryStmt switchEntryStmt0 = new SwitchEntryStmt(tokenRange0, arrayCreationExpr0, nodeList0);
      switchEntryStmtArray0[0] = switchEntryStmt0;
      SwitchEntryStmt switchEntryStmt1 = new SwitchEntryStmt();
      switchEntryStmtArray0[1] = switchEntryStmt1;
      SwitchEntryStmt switchEntryStmt2 = new SwitchEntryStmt();
      switchEntryStmtArray0[2] = switchEntryStmt2;
      AssertStmt assertStmt0 = new AssertStmt(arrayCreationExpr0, arrayCreationExpr0);
      // Undeclared exception!
      try { 
        assertStmt0.asSwitchStmt();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // assert new empty {} : new empty {}; is not an SwitchStmt
         //
         verifyException("com.github.javaparser.ast.stmt.Statement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PauselessHashMap<Delayed, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<Delayed, BinaryExpr.Operator>(286);
      PauselessHashMap<Delayed, BinaryExpr.Operator> pauselessHashMap1 = new PauselessHashMap<Delayed, BinaryExpr.Operator>(pauselessHashMap0);
      pauselessHashMap1.kickoffBackgroundResize(0);
      pauselessHashMap1.finishResizing();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      delayQueue0.poll((long) 0, timeUnit0);
      BiFunction<Delayed, Object, BinaryExpr.Operator> biFunction0 = (BiFunction<Delayed, Object, BinaryExpr.Operator>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      pauselessHashMap0.computeIfPresent((Delayed) null, biFunction0);
      PauselessHashMap.areEqualValues(pauselessHashMap0, pauselessHashMap0);
      PauselessHashMap.Entry<String, Integer> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<String, Integer>("", 4288);
      PauselessHashMap.Entry<Object, PauselessHashMap.Entry<String, Integer>> pauselessHashMap_Entry1 = new PauselessHashMap.Entry<Object, PauselessHashMap.Entry<String, Integer>>(pauselessHashMap0, pauselessHashMap_Entry0);
      pauselessHashMap_Entry1.isValid();
      PauselessHashMap<Delayed, PauselessHashMap<String, Object>> pauselessHashMap2 = null;
      try {
        pauselessHashMap2 = new PauselessHashMap<Delayed, PauselessHashMap<String, Object>>((-1137));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PauselessHashMap<PauselessHashMap.Entry<String, String>, String> pauselessHashMap0 = new PauselessHashMap<PauselessHashMap.Entry<String, String>, String>();
      PauselessHashMap<BinaryExpr.Operator, ConstructorDeclaration> pauselessHashMap1 = new PauselessHashMap<BinaryExpr.Operator, ConstructorDeclaration>(737);
      pauselessHashMap1.keySet();
      PauselessHashMap.HashMapEntrySet<BinaryExpr.Operator, ConstructorDeclaration> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<BinaryExpr.Operator, ConstructorDeclaration>(pauselessHashMap1);
      pauselessHashMap_HashMapEntrySet0.size();
      HashMap<ConstructorDeclaration, LabeledStmt> hashMap0 = new HashMap<ConstructorDeclaration, LabeledStmt>();
      PauselessHashMap<ConstructorDeclaration, LabeledStmt> pauselessHashMap2 = new PauselessHashMap<ConstructorDeclaration, LabeledStmt>(hashMap0);
      int int0 = 1768;
      PauselessHashMap<ConstructorDeclaration, LabeledStmt> pauselessHashMap3 = new PauselessHashMap<ConstructorDeclaration, LabeledStmt>(1768);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap2.new Resizer(pauselessHashMap3, 51, false);
      PauselessHashMap<ConstructorDeclaration, LabeledStmt> pauselessHashMap4 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap4.clone();
      int int1 = 4893;
      PauselessHashMap.Entry<Object, Integer> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<Object, Integer>(pauselessHashMap2, 4893);
      pauselessHashMap_Entry0.toString();
      pauselessHashMap_Entry0.clone();
      Object object0 = null;
      PauselessHashMap<Integer, ConstructorDeclaration> pauselessHashMap5 = new PauselessHashMap<Integer, ConstructorDeclaration>();
      // Undeclared exception!
      try { 
        PauselessHashMap.areEqualValues((Object) null, pauselessHashMap5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      PauselessHashMap<AbstractMap.SimpleEntry<Integer, Integer>, Annotation> pauselessHashMap0 = new PauselessHashMap<AbstractMap.SimpleEntry<Integer, Integer>, Annotation>();
      PauselessHashMap<Delayed, Integer> pauselessHashMap1 = new PauselessHashMap<Delayed, Integer>();
      pauselessHashMap1.clone();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      PauselessHashMap.HashMapEntrySet<ConstructorDeclaration, Integer> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<ConstructorDeclaration, Integer>((PauselessHashMap<ConstructorDeclaration, Integer>) null);
      // Undeclared exception!
      try { 
        pauselessHashMap_HashMapEntrySet0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap$HashMapEntrySet", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PauselessHashMap<Integer, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<Integer, BinaryExpr.Operator>();
      pauselessHashMap0.keySet();
      PauselessHashMap.InternalMapEntry<Object, String> pauselessHashMap_InternalMapEntry0 = new PauselessHashMap.InternalMapEntry<Object, String>("=");
      pauselessHashMap_InternalMapEntry0.getValue();
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.AND;
      BinaryExpr.Operator binaryExpr_Operator1 = BinaryExpr.Operator.BINARY_OR;
      PauselessHashMap.Entry<BinaryExpr.Operator, BinaryExpr.Operator> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<BinaryExpr.Operator, BinaryExpr.Operator>(binaryExpr_Operator0, binaryExpr_Operator1);
      pauselessHashMap_Entry0.toString();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, LabeledStmt> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, LabeledStmt>(27, 27);
      PauselessHashMap.Entry<ConstructorDeclaration, LabeledStmt>[] pauselessHashMap_EntryArray0 = (PauselessHashMap.Entry<ConstructorDeclaration, LabeledStmt>[]) Array.newInstance(PauselessHashMap.Entry.class, 0);
      pauselessHashMap0.elementData = pauselessHashMap_EntryArray0;
      pauselessHashMap0.clear();
      pauselessHashMap0.forceFinishResizing();
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, LabeledStmt> pauselessHashMap0 = null;
      PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleImmutableEntry<String, Integer>, LabeledStmt> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleImmutableEntry<String, Integer>, LabeledStmt>((PauselessHashMap<AbstractMap.SimpleImmutableEntry<String, Integer>, LabeledStmt>) null);
      pauselessHashMap_HashMapEntrySet0.contains((Object) null);
      int int0 = 0;
      PauselessHashMap<LabeledStmt, LabeledStmt> pauselessHashMap1 = new PauselessHashMap<LabeledStmt, LabeledStmt>(0, 308.38F);
      LabeledStmt labeledStmt0 = new LabeledStmt();
      // Undeclared exception!
      try { 
        pauselessHashMap1.createEntry(labeledStmt0, (-1), labeledStmt0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      PauselessHashMap<LabeledStmt, ConstructorDeclaration> pauselessHashMap0 = new PauselessHashMap<LabeledStmt, ConstructorDeclaration>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, (-1318), true);
      PauselessHashMap<LabeledStmt, ConstructorDeclaration> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap1.containsValue(pauselessHashMap_Resizer0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, String> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, String>(0);
      PauselessHashMap<ConstructorDeclaration, Object> pauselessHashMap1 = new PauselessHashMap<ConstructorDeclaration, Object>(pauselessHashMap0);
      PauselessHashMap.Entry<PauselessHashMap<ConstructorDeclaration, Object>, PauselessHashMap<Object, ConstructorDeclaration>> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<PauselessHashMap<ConstructorDeclaration, Object>, PauselessHashMap<Object, ConstructorDeclaration>>(pauselessHashMap1, 0);
      pauselessHashMap_Entry0.clone();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      PauselessHashMap<Object, String> pauselessHashMap0 = new PauselessHashMap<Object, String>();
      PauselessHashMap<Integer, String> pauselessHashMap1 = null;
      try {
        pauselessHashMap1 = new PauselessHashMap<Integer, String>((Map<? extends Integer, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = 72;
      PauselessHashMap<Integer, Integer> pauselessHashMap0 = new PauselessHashMap<Integer, Integer>(72);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 130, false);
      pauselessHashMap_Resizer0.startTimeNsec = 0L;
      PauselessHashMap<Integer, Integer> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      Integer integer0 = new Integer(0);
      BiFunction<Object, Object, Integer> biFunction0 = (BiFunction<Object, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      pauselessHashMap1.merge(integer0, integer0, biFunction0);
      pauselessHashMap1.keySet = null;
      pauselessHashMap1.findNullKeyEntry();
      int int1 = (-1315);
      PauselessHashMap<String, String> pauselessHashMap2 = null;
      try {
        pauselessHashMap2 = new PauselessHashMap<String, String>((-1315));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 8, true);
      pauselessHashMap_Resizer0.run();
      PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap1.remove((Object) pauselessHashMap_Resizer0, (Object) pauselessHashMap_Resizer0);
      pauselessHashMap1.values();
      PauselessHashMap.EntryArrayHelper.getUnsafe();
      PauselessHashMap<Integer, BinaryExpr.Operator> pauselessHashMap2 = new PauselessHashMap<Integer, BinaryExpr.Operator>();
      Integer integer0 = new Integer(8);
      PauselessHashMap.Entry<Integer, BinaryExpr.Operator> pauselessHashMap_Entry0 = pauselessHashMap2.createHashedEntry(integer0, 8, 740);
      PauselessHashMap<Integer, Integer> pauselessHashMap3 = new PauselessHashMap<Integer, Integer>();
      PauselessHashMap<Integer, Integer> pauselessHashMap4 = new PauselessHashMap<Integer, Integer>(pauselessHashMap3);
      PauselessHashMap.Entry<String, Object> pauselessHashMap_Entry1 = new PauselessHashMap.Entry<String, Object>("", 8);
      pauselessHashMap4.getEntry(pauselessHashMap_Entry1);
      PauselessHashMap.Entry<PauselessHashMap.Entry<String, ConstructorDeclaration>, BinaryExpr.Operator>[] pauselessHashMap_EntryArray0 = (PauselessHashMap.Entry<PauselessHashMap.Entry<String, ConstructorDeclaration>, BinaryExpr.Operator>[]) Array.newInstance(PauselessHashMap.Entry.class, 1);
      PauselessHashMap<String, ConstructorDeclaration> pauselessHashMap5 = new PauselessHashMap<String, ConstructorDeclaration>(8, 740);
      PauselessHashMap.Entry<String, ConstructorDeclaration>[] pauselessHashMap_EntryArray1 = pauselessHashMap5.resizingIntoElementData;
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.GREATER_EQUALS;
      PauselessHashMap.Entry<PauselessHashMap.Entry<String, ConstructorDeclaration>, BinaryExpr.Operator> pauselessHashMap_Entry2 = new PauselessHashMap.Entry<PauselessHashMap.Entry<String, ConstructorDeclaration>, BinaryExpr.Operator>((PauselessHashMap.Entry<String, ConstructorDeclaration>) null, binaryExpr_Operator0);
      pauselessHashMap_EntryArray0[0] = pauselessHashMap_Entry2;
      PauselessHashMap.EntryArrayHelper.compareAndSet(pauselessHashMap_EntryArray0, 8, pauselessHashMap_Entry0, (PauselessHashMap.Entry) null);
      PauselessHashMap<AbstractMap.SimpleEntry<Object, String>, String> pauselessHashMap6 = new PauselessHashMap<AbstractMap.SimpleEntry<Object, String>, String>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap6.new Resizer(pauselessHashMap6, (-542), true);
      PauselessHashMap<AbstractMap.SimpleEntry<Object, String>, String> pauselessHashMap7 = pauselessHashMap_Resizer1.associatedMap;
      PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleEntry<Object, String>, String> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<AbstractMap.SimpleEntry<Object, String>, String>(pauselessHashMap7);
      pauselessHashMap_HashMapEntrySet0.hashMap();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PauselessHashMap<Integer, ConstructorDeclaration> pauselessHashMap0 = new PauselessHashMap<Integer, ConstructorDeclaration>(1, 1);
      PauselessHashMap<Integer, ConstructorDeclaration> pauselessHashMap1 = new PauselessHashMap<Integer, ConstructorDeclaration>(pauselessHashMap0);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap1.new Resizer(pauselessHashMap1, 1, false);
      pauselessHashMap_Resizer0.startTimeNsec = 2L;
      PauselessHashMap<Integer, ConstructorDeclaration> pauselessHashMap2 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap2.values();
      PauselessHashMap<Delayed, String> pauselessHashMap3 = new PauselessHashMap<Delayed, String>(3310);
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap3.new Resizer(pauselessHashMap3, 1, false);
      PauselessHashMap<Delayed, String> pauselessHashMap4 = pauselessHashMap_Resizer1.associatedMap;
      PauselessHashMap<Delayed, String> pauselessHashMap5 = new PauselessHashMap<Delayed, String>(pauselessHashMap4);
      PauselessHashMap.Entry<Delayed, String>[] pauselessHashMap_EntryArray0 = (PauselessHashMap.Entry<Delayed, String>[]) Array.newInstance(PauselessHashMap.Entry.class, 2);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      PauselessHashMap.Entry<Delayed, String> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<Delayed, String>((Delayed) null, 1);
      pauselessHashMap_Resizer1.startTimeNsec = 9223372036854775807L;
      pauselessHashMap_EntryArray0[0] = pauselessHashMap_Entry0;
      pauselessHashMap5.indicatedObservedResizingIntoTable = false;
      PauselessHashMap.Entry<Delayed, String> pauselessHashMap_Entry1 = new PauselessHashMap.Entry<Delayed, String>((Delayed) null, "k}k.3uojhKVU");
      pauselessHashMap_EntryArray0[1] = pauselessHashMap_Entry1;
      pauselessHashMap_Entry1.clone();
      pauselessHashMap5.elementData = pauselessHashMap_EntryArray0;
      pauselessHashMap5.kickoffBackgroundResize(0);
      PauselessHashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>> pauselessHashMap6 = new PauselessHashMap<Integer, AbstractMap.SimpleImmutableEntry<Object, String>>(0, 3310);
      pauselessHashMap6.findNullKeyEntryInElementData();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PauselessHashMap.EntryArrayHelper.getUnsafe();
      int int0 = (-717);
      PauselessHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<Integer, AbstractMap.SimpleImmutableEntry<Integer, String>>((-717), (-717));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PauselessHashMap<BinaryExpr.Operator, LabeledStmt> pauselessHashMap0 = new PauselessHashMap<BinaryExpr.Operator, LabeledStmt>();
      pauselessHashMap0.finishResizing();
      PauselessHashMap<BinaryExpr.Operator, PauselessHashMap.Entry<String, Object>> pauselessHashMap1 = new PauselessHashMap<BinaryExpr.Operator, PauselessHashMap.Entry<String, Object>>();
      pauselessHashMap1.clear();
      LabeledStmt labeledStmt0 = new LabeledStmt();
      pauselessHashMap1.removeEntry(labeledStmt0);
      PauselessHashMap<BinaryExpr.Operator, BinaryExpr.Operator> pauselessHashMap2 = new PauselessHashMap<BinaryExpr.Operator, BinaryExpr.Operator>();
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.EQUALS;
      BinaryExpr.Operator binaryExpr_Operator1 = BinaryExpr.Operator.LESS_EQUALS;
      pauselessHashMap2.putIfAbsent(binaryExpr_Operator0, binaryExpr_Operator1);
      int int0 = 0;
      pauselessHashMap2.elementCount = 0;
      BinaryExpr.Operator binaryExpr_Operator2 = BinaryExpr.Operator.LESS_EQUALS;
      // Undeclared exception!
      try { 
        pauselessHashMap2.createEntry(binaryExpr_Operator2, (-2), binaryExpr_Operator2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PauselessHashMap<BinaryExpr.Operator, LabeledStmt> pauselessHashMap0 = new PauselessHashMap<BinaryExpr.Operator, LabeledStmt>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 0, false);
      PauselessHashMap<BinaryExpr.Operator, LabeledStmt> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      PauselessHashMap<BinaryExpr.Operator, LabeledStmt> pauselessHashMap2 = new PauselessHashMap<BinaryExpr.Operator, LabeledStmt>(pauselessHashMap1);
      pauselessHashMap2.entrySet();
      PauselessHashMap<Annotation, BinaryExpr.Operator> pauselessHashMap3 = new PauselessHashMap<Annotation, BinaryExpr.Operator>();
      pauselessHashMap3.doResize(0);
      PauselessHashMap<ConstructorDeclaration, String> pauselessHashMap4 = new PauselessHashMap<ConstructorDeclaration, String>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap4.new Resizer(pauselessHashMap4, (-1151), false);
      PauselessHashMap<ConstructorDeclaration, String> pauselessHashMap5 = pauselessHashMap_Resizer1.associatedMap;
      PauselessHashMap<PauselessHashMap.Entry<Delayed, ConstructorDeclaration>, Annotation> pauselessHashMap6 = new PauselessHashMap<PauselessHashMap.Entry<Delayed, ConstructorDeclaration>, Annotation>(0);
      PauselessHashMap.Resizer pauselessHashMap_Resizer2 = pauselessHashMap6.new Resizer(pauselessHashMap6, (-1151), false);
      PauselessHashMap<PauselessHashMap.Entry<Delayed, ConstructorDeclaration>, Annotation> pauselessHashMap7 = pauselessHashMap_Resizer2.associatedMap;
      ArrayDeque<Delayed> arrayDeque0 = new ArrayDeque<Delayed>();
      LinkedTransferQueue<Delayed> linkedTransferQueue0 = new LinkedTransferQueue<Delayed>(arrayDeque0);
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>(linkedTransferQueue0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      delayQueue0.poll(0L, timeUnit0);
      PauselessHashMap.Entry<Delayed, ConstructorDeclaration> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<Delayed, ConstructorDeclaration>((Delayed) null, 0);
      PauselessHashMap.Entry<Delayed, ConstructorDeclaration> pauselessHashMap_Entry1 = pauselessHashMap_Entry0.next;
      delayQueue0.containsAll(arrayDeque0);
      Vector<Annotation> vector0 = new Vector<Annotation>();
      pauselessHashMap7.valuesCollection = (Collection<Annotation>) vector0;
      pauselessHashMap7.put((PauselessHashMap.Entry<Delayed, ConstructorDeclaration>) null, (Annotation) null);
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.OR;
      TokenRange tokenRange0 = TokenRange.INVALID;
      SimpleName simpleName0 = null;
      try {
        simpleName0 = new SimpleName(tokenRange0, "");
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // A string was unexpectedly empty.
         //
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = 0;
      PauselessHashMap<LabeledStmt, String> pauselessHashMap0 = new PauselessHashMap<LabeledStmt, String>(0);
      LinkedBlockingQueue<String> linkedBlockingQueue0 = new LinkedBlockingQueue<String>();
      pauselessHashMap0.valuesCollection = (Collection<String>) linkedBlockingQueue0;
      pauselessHashMap0.findNullKeyEntry();
      PauselessHashMap<BinaryExpr.Operator, BinaryExpr.Operator> pauselessHashMap1 = new PauselessHashMap<BinaryExpr.Operator, BinaryExpr.Operator>(0);
      BinaryExpr.Operator binaryExpr_Operator0 = BinaryExpr.Operator.REMAINDER;
      int int1 = (-5362);
      // Undeclared exception!
      try { 
        pauselessHashMap1.createHashedEntry(binaryExpr_Operator0, (-5362), 194);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5362
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      PauselessHashMap<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, BinaryExpr.Operator>, BinaryExpr.Operator> pauselessHashMap0 = new PauselessHashMap<AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, BinaryExpr.Operator>, BinaryExpr.Operator>(117);
      PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator> pauselessHashMap1 = new PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator>();
      PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator> pauselessHashMap2 = new PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator>(pauselessHashMap1);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap2.new Resizer(pauselessHashMap1, 117, true);
      PauselessHashMap<ConstructorDeclaration, BinaryExpr.Operator> pauselessHashMap3 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap3.get(pauselessHashMap2);
      pauselessHashMap0.containsValue((Object) null);
      PauselessHashMap<AbstractMap.SimpleEntry<Optional<BinaryExpr.Operator>, Object>, AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>> pauselessHashMap4 = new PauselessHashMap<AbstractMap.SimpleEntry<Optional<BinaryExpr.Operator>, Object>, AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer1 = pauselessHashMap4.new Resizer(pauselessHashMap4, 117, false);
      ArrayCreationLevel arrayCreationLevel0 = new ArrayCreationLevel();
      Class<BinaryExpr.Operator> class0 = BinaryExpr.Operator.class;
      Optional<BinaryExpr.Operator> optional0 = arrayCreationLevel0.getAncestorOfType(class0);
      AbstractMap.SimpleEntry<Optional<BinaryExpr.Operator>, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Optional<BinaryExpr.Operator>, Object>(optional0, pauselessHashMap2);
      PauselessHashMap.Entry<AbstractMap.SimpleEntry<Optional<BinaryExpr.Operator>, Object>, AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<AbstractMap.SimpleEntry<Optional<BinaryExpr.Operator>, Object>, AbstractMap.SimpleImmutableEntry<BinaryExpr.Operator, String>>(abstractMap_SimpleEntry0, (-1807));
      // Undeclared exception!
      try { 
        pauselessHashMap_Resizer1.insertUniqueEquivalentAtHeadOfBucket(pauselessHashMap_Entry0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap$Resizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = (-1);
      PauselessHashMap<Integer, String> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<Integer, String>((-1), 1.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = 745;
      PauselessHashMap<Object, Integer> pauselessHashMap0 = new PauselessHashMap<Object, Integer>(745);
      PauselessHashMap.HashMapEntrySet<Object, Integer> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<Object, Integer>(pauselessHashMap0);
      PauselessHashMap<Object, Integer> pauselessHashMap1 = pauselessHashMap_HashMapEntrySet0.hashMap();
      pauselessHashMap1.finishResizing();
      // Undeclared exception!
      try { 
        pauselessHashMap1.findNullKeyEntryInResizingIntoElementData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, Delayed> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, Delayed>(100);
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap0.new Resizer(pauselessHashMap0, 0, true);
      PauselessHashMap<ConstructorDeclaration, Delayed> pauselessHashMap1 = pauselessHashMap_Resizer0.associatedMap;
      PauselessHashMap<LabeledStmt, Delayed> pauselessHashMap2 = new PauselessHashMap<LabeledStmt, Delayed>();
      PauselessHashMap<LabeledStmt, Delayed> pauselessHashMap3 = new PauselessHashMap<LabeledStmt, Delayed>();
      pauselessHashMap2.putAll(pauselessHashMap3);
      PauselessHashMap<LabeledStmt, Object> pauselessHashMap4 = new PauselessHashMap<LabeledStmt, Object>(pauselessHashMap2);
      PauselessHashMap.HashMapEntrySet<LabeledStmt, Object> pauselessHashMap_HashMapEntrySet0 = new PauselessHashMap.HashMapEntrySet<LabeledStmt, Object>(pauselessHashMap4);
      pauselessHashMap_HashMapEntrySet0.hashMap();
      PauselessHashMap.Entry<String, BinaryExpr.Operator> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<String, BinaryExpr.Operator>("]s", 100);
      pauselessHashMap_Entry0.clone();
      pauselessHashMap_Entry0.isValid();
      PauselessHashMap<ConstructorDeclaration, Object> pauselessHashMap5 = null;
      try {
        pauselessHashMap5 = new PauselessHashMap<ConstructorDeclaration, Object>((-1209), 0.0F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      PauselessHashMap<Object, Integer> pauselessHashMap0 = new PauselessHashMap<Object, Integer>();
      PauselessHashMap.InternalMapEntry<Object, Integer> pauselessHashMap_InternalMapEntry0 = new PauselessHashMap.InternalMapEntry<Object, Integer>(pauselessHashMap0);
      Object object0 = pauselessHashMap_InternalMapEntry0.clone();
      PauselessHashMap.Entry<Object, String> pauselessHashMap_Entry0 = new PauselessHashMap.Entry<Object, String>(object0, "%s is not an CallableDeclaration");
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      PauselessHashMap<String, Object> pauselessHashMap0 = new PauselessHashMap<String, Object>();
      int int0 = (-1373);
      PauselessHashMap<ConstructorDeclaration, ConstructorDeclaration> pauselessHashMap1 = null;
      try {
        pauselessHashMap1 = new PauselessHashMap<ConstructorDeclaration, ConstructorDeclaration>((-1373), 930.74F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PauselessHashMap<Object, Object> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<Object, Object>((-1710));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = 4;
      PauselessHashMap<Delayed, BinaryExpr.Operator> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<Delayed, BinaryExpr.Operator>(4, (-232.54F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        PauselessHashMap.EntryArrayHelper.calculateShiftForScale(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown pointer size
         //
         verifyException("net.mooctest.PauselessHashMap$EntryArrayHelper", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = (-835);
      PauselessHashMap<String, Integer> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<String, Integer>((-835));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      PauselessHashMap<ConstructorDeclaration, Integer> pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, Integer>();
      PauselessHashMap<ConstructorDeclaration, Integer> pauselessHashMap1 = new PauselessHashMap<ConstructorDeclaration, Integer>(pauselessHashMap0);
      PauselessHashMap<ConstructorDeclaration, Integer> pauselessHashMap2 = new PauselessHashMap<ConstructorDeclaration, Integer>(pauselessHashMap1);
      PauselessHashMap<LabeledStmt, AbstractMap.SimpleImmutableEntry<String, LabeledStmt>> pauselessHashMap3 = new PauselessHashMap<LabeledStmt, AbstractMap.SimpleImmutableEntry<String, LabeledStmt>>();
      PauselessHashMap.Resizer pauselessHashMap_Resizer0 = pauselessHashMap3.new Resizer(pauselessHashMap3, 2478, false);
      PauselessHashMap<LabeledStmt, AbstractMap.SimpleImmutableEntry<String, LabeledStmt>> pauselessHashMap4 = pauselessHashMap_Resizer0.associatedMap;
      pauselessHashMap4.values();
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      int int0 = 48;
      PauselessHashMap<Integer, Delayed> pauselessHashMap0 = new PauselessHashMap<Integer, Delayed>(48);
      pauselessHashMap0.rehash(48);
      PauselessHashMap<Integer, Delayed> pauselessHashMap1 = new PauselessHashMap<Integer, Delayed>(pauselessHashMap0);
      pauselessHashMap1.size();
      SuperExpr superExpr0 = new SuperExpr();
      // Undeclared exception!
      try { 
        superExpr0.asLiteralStringValueExpr();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // super is not an LiteralStringValueExpr
         //
         verifyException("com.github.javaparser.ast.expr.Expression", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = (-922);
      PauselessHashMap<ConstructorDeclaration, Delayed> pauselessHashMap0 = null;
      try {
        pauselessHashMap0 = new PauselessHashMap<ConstructorDeclaration, Delayed>((-922));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.PauselessHashMap", e);
      }
  }
}
