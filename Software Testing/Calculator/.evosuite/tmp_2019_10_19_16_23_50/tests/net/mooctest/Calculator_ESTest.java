/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 19 08:26:44 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import net.mooctest.Calculator;
import net.mooctest.ExpressionParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(2);
      Calculator.expParser = expressionParser0;
      try { 
        Calculator.evaluate("(s+)?(/)(.*)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calculator.parseCommand("list funcs");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Calculator.parseCommand("list vars");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calculator.parseCommand("list cmds");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calculator.parseCommand("list");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calculator.parseCommand("help cmds");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calculator.parseCommand("help funcs");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calculator.parseCommand("help vars");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calculator.parseCommand("help");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calculator.parseCommand("exit");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        Calculator.parseCommand("\n\t    Nesting of assignments is also supported, as follows : ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // CommandNotFoundException
         //
         verifyException("net.mooctest.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        Calculator.evaluate("(s+)?(/)(.*)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.Calculator", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calculator calculator0 = new Calculator();
  }
}
