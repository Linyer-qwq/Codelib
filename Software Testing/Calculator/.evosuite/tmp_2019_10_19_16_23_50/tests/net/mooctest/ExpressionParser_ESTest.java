/*
 * This file was automatically generated by EvoSuite
 * Sat Oct 19 08:27:25 GMT 2019
 */

package net.mooctest;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.regex.PatternSyntaxException;
import net.mooctest.ExpressionParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ExpressionParser_ESTest extends ExpressionParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      try { 
        ExpressionParser.indexOfMatchingBracket("A6.PSmy4Pf!700,K", 28, '\u008F', '\u008F');
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      expressionParser0.numberOfVars = (-704);
      expressionParser0.parseVariables("M&a+");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1623);
      expressionParser0.addVariable("Aa!B", (String) null);
      expressionParser0.addVariable("Aa!B", (String) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(28);
      expressionParser0.numberOfVars = (-1);
      // Undeclared exception!
      try { 
        expressionParser0.addVariable("X&ViF`jc8d`2e", "y");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(255);
      try { 
        expressionParser0.parseParenthesis("(([+-]?)d+(.d+)?([eE](-?)d+)?)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1173);
      try { 
        expressionParser0.evaluate("pl>uv,7$b,KdaV[]Fz~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      expressionParser0.parseVariables(" ");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      expressionParser0.parseParenthesis("%o+*W.");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      expressionParser0.parseParenthesis("");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      expressionParser0.parseOperators("iE(");
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      expressionParser0.parseOperators("");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1126);
      expressionParser0.parseFunctions(" ");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ExpressionParser.indexOfMatchingBracket("+", (-1), '+', '+');
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ExpressionParser.indexOfMatchingBracket("You should never see this message. If you do, please inform the author.", 0, 't', 't');
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ExpressionParser.adjustNumberSpacing("t 5 eej \">`d-RSXS");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ExpressionParser.adjustNumberSpacing("");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(41);
      try { 
        expressionParser0.parseVariables("E2t^vR<>|");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(5);
      expressionParser0.addVariable("6(Q%Mh1-'|lHz", "6(Q%Mh1-'|lHz");
      // Undeclared exception!
      try { 
        expressionParser0.parseVariables("6(Q%Mh1-'|lHz");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed group near index 28\r
         // <(\\s+)?6(Q%Mh1-'|lHz(\\s+)?>
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(348);
      // Undeclared exception!
      try { 
        expressionParser0.parseVariables((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      expressionParser0.numberOfVars = 2345;
      // Undeclared exception!
      try { 
        expressionParser0.parseVariables("X&ViF`jc 8 d 2 e");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(942);
      try { 
        expressionParser0.parseParenthesis(")3dst(Q");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(461);
      expressionParser0.addVariable("sjuHU{3WyL", "(s+)?(w+)(s+)(=)(.*)");
      // Undeclared exception!
      try { 
        expressionParser0.parseParenthesis("(s+)?(w+)(s+)(=)(.*)");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed counted closure near index 14\r
         // <(\\s+)?sjuHU{3WyL(\\s+)?>\r
         //               ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1623);
      // Undeclared exception!
      try { 
        expressionParser0.parseOperators((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(457);
      try { 
        expressionParser0.parseFunctions(" fct[$1] ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionParser.indexOfMatchingBracket("net.mooctest.MissingOperandException", (-170), '+', ':');
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionParser.indexOfMatchingBracket((String) null, 778, 'y', 'y');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(45);
      expressionParser0.addVariable(")KKqS`eer;{\"=\"W2X", ")KKqS`eer;{\"=\"W2X");
      // Undeclared exception!
      try { 
        expressionParser0.evaluate("|PfBsxq,-j9t!W*y=T");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 6\r
         // <(\\s+)?)KKqS`eer;{\"=\"W2X(\\s+)?>\r
         //       ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      // Undeclared exception!
      try { 
        expressionParser0.evaluate((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(348);
      expressionParser0.numberOfVars = 3922;
      // Undeclared exception!
      try { 
        expressionParser0.evaluate("%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 348
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        ExpressionParser.adjustNumberSpacing((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(151);
      expressionParser0.numberOfVars = 151;
      // Undeclared exception!
      try { 
        expressionParser0.addVariable("", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ExpressionParser expressionParser0 = null;
      try {
        expressionParser0 = new ExpressionParser((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      expressionParser0.evaluate("0 - 0");
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1732);
      try { 
        expressionParser0.evaluate("([+-]d+(.d+)?([eE](-?)d+)?)");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1135);
      String string0 = expressionParser0.evaluate("1");
      assertEquals("1.0", string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(40);
      try { 
        expressionParser0.evaluate("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1);
      try { 
        expressionParser0.parseFunctions("[");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1147);
      try { 
        expressionParser0.parseOperators("*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(6);
      String string0 = expressionParser0.parseVariables("{5o\"><?3.");
      assertEquals("{ 5 o\"><? 3 .", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(1126);
      try { 
        expressionParser0.evaluate("@ :mQP9<aqg*5!E#9z");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(6);
      try { 
        expressionParser0.evaluate("0 =");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // ExpressionParserException
         //
         verifyException("net.mooctest.ExpressionParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(28);
      expressionParser0.addVariable("Y", "A6.PSmy4Pf!700,K");
      expressionParser0.addVariable("X", "A6.PSmy4Pf!700,K");
      assertEquals(2, expressionParser0.numberOfVars);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ExpressionParser expressionParser0 = new ExpressionParser(0);
      String string0 = expressionParser0.parseFunctions("t5eej \">`d-RSXS");
      assertEquals(0, expressionParser0.numberOfVars);
      assertEquals("t 5 eej \">`d-RSXS", string0);
  }
}
